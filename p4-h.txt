
    diff -- Diff utility for comparing workspace content to depot content.
    (For comparing two depot paths, see p4 diff2.)

    p4 diff [-d<flags> -f -m max -Od -s<flag> -t] [file[rev] ...]

	On the client machine, diff a client file against the corresponding
	revision in the depot. The file is compared only if the file is
	opened for edit or a revision is provided. See 'p4 help revisions'
	for details about specifying revisions.

	If the file specification is omitted, all open files are diffed.
	This option can be used to view pending changelists.

	The -d<flags> modify the output as follows:
	    -dn (RCS),
	    -dc[n] (context),
	    -ds (summary),
	    -du[n] (unified),
	    -db (ignore whitespace changes),
	    -dw (ignore whitespace),
	    -dl (ignore line endings).
	The optional argument to -dc/-du specifies number of context lines.

	The -f flag diffs every file, regardless of whether they are opened
	or the client has synced the specified revision.  This option can be
	used to verify the contents of the client workspace.

	The -m max flag limits output to the first 'max' number of files,
	unless the -s flag is used, in which case it is ignored.

	The -Od flag limits output to files that differ.

	The -s options lists the files that satisfy the following criteria:

		-sa     Opened files that differ from the revision
			in the depot or are missing.

		-sb     Files that have been opened for integrate, resolved,
			and subsequently modified.

		-sd     Unopened files that are missing on the client.

		-se     Unopened files that differ from the revision
			in the depot.

		-sl	Every unopened file, along with the status of
			'same, 'diff', or 'missing' as compared to the
			corresponding revision in the depot.

		-sr     Opened files that do not differ from the revision in
			the depot.

	Note that if a revision is provided in the file specification, the -s
	options compare the file(s) regardless of whether they are opened
	or the client has synced the specified revision.

	The -t flag forces 'p4 diff' to diff binary files.

	If the environment variable $P4DIFF is set,  the specified diff
	program is launched in place of the default Perforce client diff.
	The -d<flags> option can be used to pass arguments to the diff
	program.  Because the -s flag is only implemented internally, any
	-d<flags> option used with the -s<flag> is ignored. To configure a
	diff program for Unicode files, set the environment variable
	$P4DIFFUNICODE. Specify the file's character set as the first
	argument to the program.

	See 'p4 help-graph diff' for information on using this command with
	graph depots.


    group -- Change members of user group

    p4 group [-a|-A] name
    p4 group -d [-a | -F] name
    p4 group -o name
    p4 group -i [-a|-A]

	Create a group or modify the membership of an existing group.
	A group can contain users and other groups. The group specification
	is put into a temporary file and the editor (configured by the
	environment variable $P4EDITOR) is invoked.

	A group exists when it has any users or other groups in it, and
	ceases to exist if all users and groups in it are removed.

	Each group has MaxResults, MaxScanRows, MaxLockTime and MaxOpenFiles
	fields, which limit the resources committed to operations performed
	by members of the group.  See 'p4 help maxresults' for more
	information on MaxResults, MaxScanRows, MaxLockTime and MaxOpenFiles.

	Since a user may be a member of multiple groups, the effective
	resource limits for that user take into account the resource limits
	specified by each group to which that user belongs, except for those
	groups where the limit is specified as 'unset'.

	After examining all relevant groups, an individual user's limit is
	the highest of any group with a limit to which he belongs, unlimited
	if any of his groups has 'unlimited' for that field, or unlimited
	if he belongs to no group with a limit.

	Each group also has a Timeout field, which specifies how long (in
	seconds) a 'p4 login' ticket remains valid.  A value of 'unset' or
	'unlimited' is equivalent to no timeout. An individual's timeout is
	the highest of any group with a limit to which he belongs, unlimited
	if any of his groups has 'unlimited' for the timeout value, or
	unlimited if he belongs to no group with a limit. See 'p4 help login'
	for more information.

	Each group has a PasswordTimeout field, which determines how long a
	password remains valid for members of the group.

	A group may be synchronized with an LDAP group by setting the three
	fields: LdapConfig, LdapSearchQuery and LdapUserAttribute. This takes
	the LDAP configuration (see 'p4 ldap') specified by LdapConfig and uses
	it to execute the query stored by LdapSearchQuery. The LDAP attribute
	specified by LdapUserAttribute is taken to be user's username and is
	added to the group's user list.  If the group contains references its
	members by their DNs rather than by username, you may instruct the DN
	to be followed by setting the LdapUserDNAttribute field to the name of
	the group object's attribute that the DNs are stored in: the username
	will be found by looking for the LdapUserAttribute attribute in the
	object referred to by the DN.  At least one group owner must be set
	if these LDAP fields are used.  If the LDAP server requires login for
	read-only queries, then the LDAP configuration must contain valid bind
	credentials in the LDAP spec's SearchBindDN and SearchPasswd fields

	The -d flag deletes a group.

	The -o flag writes the group specification to standard output. The
	user's editor is not invoked.

	The -i flag reads a group specification from standard input. The
	user's editor is not invoked.  The new group specification replaces
	the previous one.

	The -a flag enables a user without 'super' access to modify the group
	if that user is an 'owner' of that group. Group owners	are specified
	in the 'Owners' field of the group spec.

	The -A flag enables a user with 'admin' access to add a new group.
	Existing groups may not be modified when this flag is used.

	The -F flag, used only with -d, forces the deletion of the
	specified group, and also removes the group from the protections
	table and from all groups.

	All commands that require access granted by 'p4 protect' consider a
	user's groups when calculating access levels.

	'p4 group' requires 'super' access granted by 'p4 protect' unless
	invoked with the '-a' or '-A' flag by a qualified user.


    changes -- Display list of pending and submitted changelists
    changelists -- synonym for 'changes'

    p4 changes [-i -t -l -L -f -r] [-c client] [ -e changelist# ]
	    [-m max] [-s status] [-u user] [file[revRange] ...]

	Returns a list of all pending and submitted changelists currently
	stored in the server.

	If files are specified, 'p4 changes' lists only changelists that
	affect those files.  If the file specification includes a revision
	range, 'p4 changes' lists only submitted changelists that affect
	the specified revisions.  See 'p4 help revisions' for details.

	If files are not specified, 'p4 changes' limits its report
	according to each change's type ('public' or 'restricted').
	If a submitted or shelved change is restricted, the change is
	not reported unless the user owns the change or has list
	permission for at least one file in the change. Only the owner
	of a restricted and pending (not shelved) change is permitted
	to see it.

	The -i flag also includes any changelists integrated into the
	specified files.

	The -t flag displays the time as well as the date.

	The -l flag displays the full text of the changelist
	descriptions.

	The -L flag displays the changelist descriptions, truncated to 250
	characters if longer.

	The -f flag enables admin users to view restricted changes.

	The -c client flag displays only submitted by the specified client.

	The -e changelist# flag displays only changes that are above and
	including the specified changelist number.

	The -m max flag limits changes to the 'max' most recent.

	The -r flag sorts the output in reverse order.

	The -s status flag limits the output to changelists with the specified
	status. Specify '-s pending', '-s shelved', or '-s submitted'.

	The -u user flag displays only changes owned by the specified user.


    help -- Print help message

    p4 help [command ...]

	Print usage details about the specified command.  If the command
	name is omitted, print a general help message about Perforce and
	list the available client commands.


    label -- Create or edit a label specification

    p4 label [-f -g -t template] name
    p4 label -d [-f -g] name
    p4 label -o [-t template] name
    p4 label -i [-f -g]

	Create or edit a label. The name parameter is required. The
	specification form is put into a temporary file and the editor
	(configured by the environment variable $P4EDITOR) is invoked.

	The label specification form contains the following fields:

	Label:       The label name (read only.)

	Owner:       The user who created this label.  A label can be owned
	             by a user, or owned by a group.  Can be changed.

	Update:      The date that this specification was last modified.

	Access:      The date of the last 'labelsync' or use of '@label'
		     referencing this label.

	Description: A short description of the label (optional).

	Options:     Flags to change the label behavior.

	             locked       Prevents users other than the label owner
	             unlocked     from changing the specification. Prevents
	                          the label from being deleted. Prevents the
	                          owner from running 'p4 labelsync'. For a
	                          loaded label, prevents 'p4 unload'.

	             autoreload   For a static label, indicates where label
	             noautoreload revisions are stored. Specify 'noautoreload'
	                          to indicate that the revisions should be
	                          stored in the db.label table. Specify
	                          'autoreload' to indicate that the revisions
	                          should be stored in the unload depot.

	Revision:    An optional revision specification for an automatic
		     label.  Enclose in double quotes if it contains the
		     # (form comment) character.  An automatic label can
		     be treated as a pure alias of a single revision
		     specification (excluding @label) provided that the
		     View mapping is empty.

	View:        A mapping that selects files from the depot. The
		     default view selects all depot files. Only the left
		     side of the mapping is used for labels.  Leave this
		     field blank when creating an automatic label as
		     a pure alias. See 'p4 help views'.

	ServerID:    If set, restricts usage to the named server.
		     If unset, usage is allowed on any server.

	A label is a named collection of revisions.  A label is either
	automatic or static.  An automatic label refers to the revisions
	given in the View: and Revision: fields.  A static label refers to
	the revisions that are associated with the label using the 'p4 tag'
	or 'p4 labelsync' commands.  A static label cannot have a Revison:
	field. See 'p4 help revisions' for information on using labels as
	revision specifiers.

	Only the label owner can run 'p4 labelsync', and only if the label
	is unlocked. A label without an owner can be labelsync'd by any user.

	Flag -d deletes the specified label. You cannot delete a locked label.
	The -f flag forces the delete.

	The -o flag writes the label specification to standard output.  The
	user's editor is not invoked.

	The -i flag reads a label specification from standard input.  The
	user's editor is not invoked.

	The -t flag copies the view and options from the template label to
	the new label.

	The -f flag forces the deletion of a label. By default, locked labels
	can only be deleted by their owner.  The -f flag also permits the
	Last Modified date to be set.  The -f flag requires 'admin' access,
	which is granted by 'p4 protect'.

	The -g flag should be used on an Edge Server to update a global
	label. Without -g, the label definition is visible only to users
	of this Edge Server. Configuring rpl.labels.global=1 reverses this
	default and causes this flag to have the opposite meaning.


    branches -- Display list of branch specifications

    p4 branches [-t] [-u user] [[-e|-E] nameFilter] [-m max]

	Lists branch specifications. (See 'p4 help branch'.)

	The -t flag displays the time as well as the date.

	The -u user flag lists branch specs owned by the specified user.

	The -e nameFilter flag lists branch specs with a name that matches
	the nameFilter pattern, for example: -e 'svr-dev-rel*'. The -e flag
	uses the server's normal case-sensitivity rules. The -E flag makes
	the matching case-insensitive, even on a case-sensitive server.

	The -m max flag limits output to the specified number of branch specs.


    changes -- Display list of pending and submitted changelists
    changelists -- synonym for 'changes'

    p4 changes [-i -t -l -L -f -r] [-c client] [ -e changelist# ]
	    [-m max] [-s status] [-u user] [file[revRange] ...]

	Returns a list of all pending and submitted changelists currently
	stored in the server.

	If files are specified, 'p4 changes' lists only changelists that
	affect those files.  If the file specification includes a revision
	range, 'p4 changes' lists only submitted changelists that affect
	the specified revisions.  See 'p4 help revisions' for details.

	If files are not specified, 'p4 changes' limits its report
	according to each change's type ('public' or 'restricted').
	If a submitted or shelved change is restricted, the change is
	not reported unless the user owns the change or has list
	permission for at least one file in the change. Only the owner
	of a restricted and pending (not shelved) change is permitted
	to see it.

	The -i flag also includes any changelists integrated into the
	specified files.

	The -t flag displays the time as well as the date.

	The -l flag displays the full text of the changelist
	descriptions.

	The -L flag displays the changelist descriptions, truncated to 250
	characters if longer.

	The -f flag enables admin users to view restricted changes.

	The -c client flag displays only submitted by the specified client.

	The -e changelist# flag displays only changes that are above and
	including the specified changelist number.

	The -m max flag limits changes to the 'max' most recent.

	The -r flag sorts the output in reverse order.

	The -s status flag limits the output to changelists with the specified
	status. Specify '-s pending', '-s shelved', or '-s submitted'.

	The -u user flag displays only changes owned by the specified user.


    ignores -- List P4IGNORE mappings

    p4 ignores [-v] [path ...]
    p4 ignores [-v] -i path ...

	List the computed mappings from the rules found in P4IGNORE files
	at the specified path. The path(s) must be in local syntax. If no
	paths are specified, P4IGNORE rules from the current directory are
	reported.

	The -v flag displays additional information about the origin of the
	mapping. This includes the original rule, which file that was loaded
	from and the line number in that file.

	The -i flag allows you to test whether the path specified would be
	ignored by the rules in the P4IGNORE files. The target is listed if
	path matches one of the mappings. If the -v flag is also provided,
	the target will be reported with a message explaining if it will be
	ignored and if it matched a mapping, which P4IGNORE rule affected it.


    list -- Create a temporary list of files that can be used as a label

    p4 list [ -l label ] [ -C ] [ -M ] file[revRange] ...
    p4 list -l label -d [ -M ]

	List builds an in-memory temporary list of files that can be used
	as a label in any command that can take a label. The list only lasts
	as long as the connected session, for example a temporary list created
	in one 'p4' command line request will not be available to a subsequent
	'p4' command that references the label.

	By default, the head revision is listed.  If the file argument
	specifies a revision, then all files at that revision are listed.
	If the file argument specifies a revision range, the highest revision
	in the range is used for each file. For details about specifying
	revisions, see 'p4 help revisions'.

	The -l flag specifies the name of the temporary label that should be
	used to access the list.  In the event that a label with that name
	already exists, the in-memory name has precedence over the stored one.
	Without the '-l' option the list command assigns a unique name to the
	temporary list and returns the name as output.

	The -d flag specifies that the named list should be deleted, freeing
	the memory used by that list.

	The -C flag limits any depot paths to those that can be mapped through
	the client workspace.

	The -M flag can be specified when issuing the list command against a
	forwarding replica; in this case, it indicates that the list command
	should not be processed by the replica, but should instead be
	forwarded to the master server.


    groups -- List groups (of users)

    p4 groups [-m max] [-v] [group]
    p4 groups [-m max] [-i [-v]] user | group
    p4 groups [-m max] [-g | -u | -o] name

	The first form lists all user groups defined in the server, or just
	the specified group.

	The second form displays subgroup relationships. If a user argument is
	specified, only groups containing that user are displayed. If a group
	argument is specified, only groups containing the group are displayed.

	The third form is useful when there are groups and users with the
	same name, or when requesting all groups owned by a certain user.

	The -i flag also displays groups that the user or group belongs to
	indirectly by means of membership in subgroups.

	The -m max flag limits output to the specified number of groups.

	The -v flag displays the MaxResults, MaxScanRows, MaxLockTime, and
	Timeout values for each group that is displayed.

	The -g flag indicates that the 'name' argument is a group.

	The -u flag indicates that the 'name' argument is a user.

	The -o flag indicates that the 'name' argument is an owner.


    stream -- Create, delete, or modify a stream specification

    p4 stream [-f] [-d] [-P parent] [-t type] [name]
    p4 stream [-o [-v]] [-P parent] [-t type] [name[@change]]
    p4 stream [-f] [-d] name
    p4 stream -i [-f]
    p4 stream edit
    p4 stream resolve [-a<flag>] [-n] [-o]
    p4 stream revert

	A stream specification ('spec') names a path in a stream depot to be
	treated as a stream.  (See 'p4 help streamintro'.)  The spec also
	defines the stream's lineage, its view, and its expected flow of
	change.

	The 'p4 stream' command puts the stream spec into a temporary file and
	invokes the editor configured by the environment variable $P4EDITOR.
	When creating a stream, the type of the stream must be specified with
	the '-t' flag.  Saving the file creates or modifies the stream spec.

	By default updates to the stream spec are automatically visible to
	all clients; see 'p4 help streamcmds' for information on 'opening' a
	stream spec to stage updates on one client before submitting them.

	Creating a stream spec does not branch a new stream.  To branch a
	stream, use 'p4 copy -r -S stream', where 'stream' is the name of a
	stream spec.

	The stream spec contains the following fields:

	Stream:   The stream's path in a stream depot, of the form
	          //depotname/streamname. This is both the name of the stream
	          spec and the permanent, unique identifier of the stream.
	          This stream path may extend beyond the traditional form by
	          updating the 'StreamDepth' field in the stream depot when
	          creating a new stream depot.  Here, depth relates to the
	          number of single slashes in stream names following the
	          depot name (so traditional form above reflects StreamDepth
	          of 1.  All streams within a stream depot must adhere to
	          this same format.

	Update:   The date this stream spec was last changed.

	Access:   The date of the last command used with this spec.

	Owner:    The stream's owner. A stream can be owned by a user, or
	          owned by a group. Can be changed.

	Name:     An alternate name of the stream, for use in display outputs.
	          Defaults to the final path in the 'streamname' portion in
	          the stream. Can be changed.

	Parent:   The parent of this stream. Can be 'none' if the stream type
	          is 'mainline',  otherwise must be set to an existing stream
	          identifier, of the form //depotname/streamname.
	          Can be changed.

	Type:     'mainline', 'virtual', 'development', 'release' or 'task'.
	          Defines the role of a stream: A 'mainline' may not have a
	          parent. A 'virtual' stream is not a stream but an alternate
	          view of its parent stream.  The 'development' and 'release'
	          streams have controlled flow. Can be changed.  A 'task'
	          stream is a lightweight short-lived stream that only
	          promotes edited files to the repository; branched and
	          integrated files are stored in shadow tables that are
	          removed when the task stream is deleted or unloaded.

	          Flow control is provided by 'p4 copy -S' and 'p4 merge -S'.
	          These commands restrict the flow of change as follows:

	          Stream Type   Direction of flow     Allowed with
	          -----------   -----------------     ------------
	          development   to parent stream      'p4 copy'
	          task          to parent stream      'p4 copy'
	          release       to parent stream      'p4 merge'
	          development   from parent stream    'p4 merge'
	          release       from parent stream    'p4 copy'

	Description: An optional description of the stream.

	Options:  Flags to configure stream behavior. Defaults are marked *:

	          unlocked *      Indicates whether the stream spec is locked
	          locked          against modifications. If locked, the spec
	                          may not be deleted, and only its owner or
	                          group users can modify it.

	          allsubmit *     Indicates whether all users or only the
	          ownersubmit     owner (or group users) of the stream may
	                          submit changes to the stream path.

	          toparent *      Indicates if controlled flow from the
	          notoparent      stream to its parent is expected to occur.

	          fromparent *    Indicates if controlled flow to the stream
	          nofromparent    from its parent is expected to occur.

	          mergedown *     Indicates if merge flow is restricted or
	          mergeany        merge is permitted from any other stream.

	          The [no]fromparent and [no]toparent options determine if
	          'p4 copy -S' and 'p4 merge -S' allow change to flow between
	          a stream and its parent. A 'virtual' stream must have its
	          flow options set as 'notoparent' and 'nofromparent'. Flow
	          options are ignored for 'mainline' streams.

	Paths:    One or more lines that define file paths in the stream view.
	          Each line is of the form:

	              <path_type> <view_path> [<depot_path>]

	          where <path_type> is a single keyword, <view_path> is a file
	          path with no leading slashes, and the optional <depot_path>
	          is a file path beginning with '//'.  Both <view_path> and
	          <depot_path> may contain trailing wildcards, but no leading
	          wildcards.  Embedded wildcards are restricted to the final
	          expression of the path, with no further slashes.
	          Lines in the Paths field may appear in any order.
	          A duplicated <view_path> overrides its preceding entry.

	          For example:

	              share   src/...
	              import  lib/abc/...  //over/there/abc/...
	              import  module2/*.txt //demo3/main/mudule2/*.txt
	              isolate bin/*
	              isolate bin/...dll

	          Default is:

	              share   ...

	          The <path_type> keyword must be one of:

	          share:  <view_path> will be included in client views and
	                  in branch views. Files in this path are accessible
	                  to workspaces, can be submitted to the stream, and
	                  can be integrated with the parent stream.

	          isolate: <view_path> will be included in client views but
	                   not in branch views. Files in this path are
	                   accessible to workspaces, can be submitted to the
	                   stream, but are not integratable with the parent
	                   stream.

	          import: <view_path> will be included in client views but
	                  not in branch views. Files in this path are mapped
	                  as in the parent stream's view (the default) or to
	                  <depot_path> (optional); they are accessible to
	                  workspaces, but can not be submitted or integrated
	                  to the stream.  If <depot_path> is used it may
	                  include a changelist or automatic label specifier;
	                  clients of that stream will be limited to seeing
	                  revisions at that point in time or lower within that
	                  depot path (See the explanation of 'ChangeView' in
	                  'p4 help client' for more details)

	          import+: <view_path> same as 'import' except that files can
	                   be submitted to the import path.

	          exclude: <view_path> will be excluded from client views
	                   and branch views. Files in this path are not
	                   accessible to workspaces, and can't be submitted
	                   or integrated to the stream.

	          Paths are inherited by child stream views. A child stream's
	          paths can downgrade the inherited view, but not upgrade it.
	          (For instance, a child stream can downgrade a shared path to
	          an isolated path, but it can't upgrade an isolated path to a
	          shared path.) Note that <depot_path> is relevant only when
	          <path_type> is 'import'.

	Remapped: Optional; one or more lines that define how stream view paths
	          are to be remapped in client views.  Each line is of the

	          form:
	              <view_path_1> <view_path_2>

	          where <view_path_1> and <view_path_2> are Perforce view paths
	          with no leading slashes, no leading wildcards, or wildcards
	          embedded between slashes:
	          For example:

	              ...    x/...
	              y/*    y/z/*

	          Line ordering in the Remapped field is significant; if more
	          than one line remaps the same files, the later line has
	          precedence.  Remapping is inherited by child stream client
	          views.

	Ignored: Optional; a list of file or directory names to be ignored in
	         client views. For example:

	             /tmp      # ignores files named 'tmp'
	             /tmp/...  # ignores dirs named 'tmp'
	             .tmp      # ignores file names ending in '.tmp'

	         Lines in the Ignored field may appear in any order.  Ignored
	         names are inherited by child stream client views.

	The -d flag causes the stream spec to be deleted.  A stream spec may
	not be deleted if it is referenced by child streams or stream clients.
	Deleting a stream spec does not remove stream files, but it does mean
	changes can no longer be submitted to the stream's path.

	The -o flag causes the stream spec to be written to the standard
	output. The user's editor is not invoked. -v may be used with -o to
	expose the automatically generated client view for this stream.
	('p4 help branch' describes how to expose the branch view.)
	If an @changelist specifier is included with the stream name, the
	(submitted) stream as of that change is displayed rather than the
	latest (or open) version.

	The -P flag can be used to insert a value into the Parent field of a
	new stream spec. It has no effect on an existing spec.

	The -t flag is used to insert a value into the type field of a
	new stream spec and to adjust the default fromparent option
	for a new 'release' -type stream. The flag has no effect on an
	existing spec.

	The -i flag causes a stream spec to be read from the standard input.
	The user's editor is not invoked.

	The -f flag allows a user other than the owner to modify or delete a
	locked stream. It requires 'admin' access granted by 'p4 protect'.

	See 'p4 help streamcmds' for information on the 'p4 stream edit',
	'p4 stream resolve', and 'p4 stream revert' commands.


    streams -- Display list of streams

    p4 streams [-U -F filter -T fields -m max] [streamPath ...]

	Reports the list of all streams currently known to the system.  If
	a 'streamPath' argument is specified, the list of streams is limited
	to those matching the supplied path. Unloaded task streams are not
	listed by default.

	For each stream, a single line of output lists the stream depot path,
	the type, the parent stream depot path, and the stream name.

	The -F filter flag limits the output to files satisfying the expression
	given as 'filter'.  This filter expression is similar to the one used
	by 'jobs -e jobview',  except that fields must match those above and
	are case sensitive.

	        e.g. -F "Parent=//Ace/MAIN & Type=development"

	Note: the filtering takes place post-compute phase; there are no
	indexes to optimize performance.

	The -T fields flag (used with tagged output) limits the fields output
	to those specified by a list given as 'fields'.  These field names can
	be separated by a space or a comma.

	        e.g. -T "Stream, Owner"

	The -m max flag limits output to the first 'max' number of streams.

	The -U flag lists unloaded task streams (see 'p4 help unload').


    user -- Create or edit a user specification

    p4 user [-f] [name]
    p4 user -d [-f | -F] name
    p4 user -D [-f] [-y] name
    p4 user -o [name]
    p4 user -i [-f]

	Create, edit, or delete a user specification.
	The specification form is put into a temporary file and the editor
	(configured by the environment variable $P4EDITOR) is invoked.

	Normally, a user specification is created automatically the first
	time that the user issues any command that updates the depot. The
	'p4 user' command is typically used to edit the user's subscription
	list for change review.

	The user specification form contains the following fields:

	User:        The user name (read-only).

	Email:       The user's email address (Default: user@client).

	Update:      The date the specification was last modified (read-only).

	Access:      The date that the user last issued a client command.

	FullName:    The user's real name.

	JobView:     Selects jobs that are displayed when the user creates
		     a changelist. These jobs can be closed automatically
		     when the user submits the changelist. For a description
		     of jobview syntax, see 'p4 help jobview'

	Reviews:     The subscription list for change review.  There is no
	             limit on the number of lines that this field can contain.
		     You can include the following wildcards:

			 ...            matches any characters including /
			 *              matches any character except /

	Password:    The user's password.  See 'p4 help passwd'.

	Type:        Must be 'service', operator, or 'standard'. Default is
		     'standard'. Once set, the user type cannot be changed.

	AuthMethod:  Must be 'perforce' or 'ldap' and may include the '+2fa'
		     modifier.  The default is 'perforce' unless overridden
		     by the 'auth.default.method' configurable; see
		     'p4 help configurables'.  AuthMethod can only be changed
		      when the -f flag has been provided.

	The -d flag deletes the specified user (unless the user has files
	open).

	The -D flag deletes the specified user, the user's pending
	changelists, and these deleted changelists' associations to
	jobs. It reverts the user’s opened files, removes the user from
	the protections table, and removes the user from its groups.
	The –D flag will not revert files in this user’s clients
	opened by other users, nor delete such clients, unless the -f
	option is specified. Shelved files will not be affected.
	Use the -y flag to perform the operation. Without the –y
	flag, a preview of the actions is reported.

	The -o flag writes the user specification to the standard output.
	The user's editor is not invoked.

	The -i flag reads a user specification from the standard input.
	The user's editor is not invoked.

	The -f flag forces the creation, update or deletion of the specified
	user, and enables you to change the Last Modified date. By default,
	users can only delete or modify their own user specifications.  The
	-f flag requires 'super' access, which is granted by 'p4 protect'.

	The -F flag, used only with -d, forces the deletion of the
	specified user, and also removes the user from the protections
	table and from all groups. This command fails if removing the
	user from any group would cause the group to be deleted. In that
	case the group should be deleted prior to deleting the user.
	The -F flag requires 'super' access, which is granted by
	'p4 protect'.


    istat -- Show/cache a stream's integration status

    p4 istat [ -a -c -C -r -s ] stream

	'p4 istat' shows a stream's cached integration status with respect
	to its parent. If the cache is stale, either because newer changes
	have been submitted or the stream's branch view has changed, 'p4
	istat' checks for pending integrations and updates the cache before
	showing status.

	Pending integrations are shown only if they are expected by the
	stream; that is, only if they are warranted by the stream's type
	and its fromParent/toParent flow options. (See 'p4 help stream'.)

	The -r flag shows the status of integration to the stream from its
	parent. By default, status of integration in the other direction is
	shown, from the stream to its parent.

	The -a flag shows status of integration in both directions.

	The -c flag forces 'p4 istat' to assume the cache is stale; it
	causes a search for pending integrations.  Use of this flag can
	impact server performance. The -C flag performs the same actions,
	and additionally clears the stream's record of the highest merged
	changelist.

	The -s flag shows cached state without refreshing stale data.


    client -- Create or edit a client workspace specification and its view
    workspace -- Synonym for 'client'

    p4 client [-f] [-t template] [-T type] [name]
    p4 client -d [-f [-Fs]] name
    p4 client -o [-t template] [-T type] [name]
    p4 client -S stream [[-c change] -o] [name]
    p4 client -s [-f] -S stream [name]
    p4 client -s [-f] -t template [name]
    p4 client -i [-f]
    p4 client -d -f --serverid=X [-Fs] name

	Creates a new client specification ('spec') or edits an existing
	spec.  A client spec is a named mapping of depot files to workspace
	files.

	The 'p4 client' command puts the client spec into a temporary file
	and invokes the editor configured by the environment variable
	$P4EDITOR.  For new workspaces, the client name defaults to the
	$P4CLIENT environment variable, if set, or to the current host name.
	Saving the file creates or modifies the client spec.

	The client spec contains the following fields:

	Client:      The client name.

	Host:        If set, restricts access to the named host.
		     If unset, access is allowed from any host.

	Owner:       The user who created this client.

	Update:      The date that this spec was last modified.

	Access:      The date that this client was last used in any way.

	Description: A short description of the workspace.

	Root:        The root directory of the workspace (specified in local
		     file system syntax), under which all versioned files
		     will be placed. If you change this setting, you must
		     physically relocate any files that currently reside
		     there.  On Windows client machines, you can specify the
		     root as "null" to enable you to map files to multiple
		     drives.

	AltRoots:    Up to two optional alternate client workspace roots.
		     The first of the main and alternate roots to match the
		     client program's current working directory is used. If
		     none match, the main root is used. 'p4 info' displays
		     the root that is being used.

	Options:     Flags to configure the client behavior. Defaults
		     are marked with *.

		allwrite	Leaves all files writable on the client;
		noallwrite *	by default, only files opened by 'p4 edit'
				are writable. If set, files might be clobbered
				as a result of ignoring the clobber option
				(see below).

		clobber		Permits 'p4 sync' to overwrite writable
		noclobber *	files on the client.  noclobber is ignored if
				allwrite is set.

		compress 	Compresses data sent between the client
		nocompress *	and server to speed up slow connections.

		locked   	Allows only the client owner to use or change
		unlocked *	the client spec.  Prevents the client spec from
				being deleted or unloaded.

		modtime  	Causes 'p4 sync' and 'p4 submit' to preserve
		nomodtime *	file modification time, as with files with the
				+m type modifier. (See 'p4 help filetypes'.)
				With nomodtime, file timestamps are updated by
				sync and submit operations.

		rmdir		Makes 'p4 sync' attempt to delete a workspace
		normdir *	directory when all files in it are removed.

	SubmitOptions:  Flags to change submit behavior.

		submitunchanged     All open files are submitted (default).

		revertunchanged     Files that have content, type, or resolved
		                    changes are submitted. Unchanged files are
		                    reverted.

		leaveunchanged      Files that have content, type, or resolved
		                    changes are submitted. Unchanged files are
		                    moved to the default changelist.

		        +reopen     Can be appended to the submit option flag
		                    to cause submitted files to be reopened in
		                    the default changelist.
		                    Example: submitunchanged+reopen

	LineEnd:    Set line-ending character(s) for client text files.

		local		mode that is native to the client (default).
		unix		linefeed: UNIX style.
		mac		carriage return: Macintosh style.
		win		carriage return-linefeed: Windows style.
		share		hybrid: writes UNIX style but reads UNIX,
				Mac or Windows style.

	View:        Maps files in the depot to files in your client
		     workspace.  Defines the files that you want in your
		     client workspace and specifies where you want them
		     to reside.  The default view maps all depot files
		     onto the client.  See 'p4 help views' for view syntax.
		     A new view takes effect on the next 'p4 sync'.

	ChangeView:  Restricts depot paths to a particular point in time.
	             Example: //depot/path/...@1000
	             Revisions submitted to the path after the specified
	             changelist will not be visible.  Files matching a
	             ChangeView path may not be submitted.

	             Automatic labels may also used to specify a particular
	             point in time: the label's 'Revision' field must be set
	             to a changelist number or a date.  If the label has a
	             view, only files that match the intersection of the
	             ChangeViewpath and the label's view will be restricted to
	             the point in time specified by the 'Revision' field; any
	             other files matching the ChangeView path may sync to
	             #head, but cannot be submitted.

	Stream:      The stream to which this client's view will be dedicated.
		     (Files in stream paths can be submitted only by dedicated
		     stream clients.) When this optional field is set, the
		     View field will be automatically replaced by a stream
		     view as the client spec is saved.

	StreamAtChange:
		     Stream meta-data (for view creation) is versioned.
		     When StreamAtChange is set, the stream hierarchy is
		     constructed back-in-time to reproduce the view that was
		     available to clients in the past. With this field set
		     changes cannot be be submitted from the client.
		     StreamAtChange is optional; Stream must be set as well.

	ServerID:    If set, restricts usage to the named server.
		     If unset, usage is allowed on the master server and on
		     any replicas of the master other than Edge Servers.

	Type:        By default all clients are 'writeable', certain clients
		     are short lived and perform long sync and build cycles.
		     Over time these build clients can fragment the 'db.have'
		     table which is used to track what files a client has
		     synced.  Setting a type of 'readonly' gives the client
		     its own personal 'db.have' database table.  A 'readonly'
		     client cannot 'edit' or 'submit' files, however for build
		     automation this is not usually a requirement and the
		     performance tradeoff is worth considering if your build
		     automation is causing issues with the 'db.have' table.
		     This option requires that an administrator has first
		     configured the 'client.readonly.dir' setting.  If it is
		     necessary to submit changes as part of your build,
		     you may specify a 'partitioned' client: like a 'readonly'
		     client, this type also has a separate 'db.have' table
		     under the 'client.readonly.dir' directory, but allows
		     journalled 'edit' and 'submit' of files.

	Note: changing the client root does not actually move the client
	files; you must relocate them manually.  Similarly, changing
	the 'LineEnd' option does not actually update the client files;
	you can refresh them with 'p4 sync -f'.

	The -d flag deletes the specified spec, as long as the client
	workspace has no opened files or pending changes.  (See 'p4 help
	opened'.) The -f flag forces the delete. The -Fs option used with -f
	forces client deletion even when the user has shelved changes. In
	this case, the shelved changes are left intact.

	The -o flag writes the named client spec to the standard output.
	The user's editor is not invoked.

	The -i flag reads a client spec from the standard input.  The
	user's editor is not invoked.

	The -t template flag, where 'template' is the name of another client
	spec, causes the View and Options fields to be replaced by those of
	the template.

	The -T type flag lets you set the type of client, this can only be
	set when first creating the client. For classic Perforce clients the
	default is 'writeable', set this value to 'readonly' for build
	automation or clients that do not need to update content.

	The -f flag can force the updating of locked clients; normally
	locked clients can only be modified by their owner.  -f also allows
	the last modified date to be set.  The -f flag requires 'admin'
	access granted by 'p4 protect'.

	The -s flag is used to switch an existing client spec's view without
	invoking the editor.  It can be used with -S to switch to a stream
	view, or with -t to switch to a view defined in another client spec.
	Switching views is not allowed in a client that has opened files.
	The -f flag can be used with -s to force switching with opened files.
	View switching has no effect on files in a client workspace until
	'p4 sync' is run.

	Without -s, the '-S stream' flag can be used to create a new client
	spec dedicated to a stream. If the client spec already exists, and
	-S is used without -s, an error occurs when the client is bound to
	a different, or no stream.  Using -S sets the new client's
	Stream field.  The special syntax '-S //a/stream@changelist' can
	be used to set both Stream and StreamAtChange at the same time.

	The '-S stream' flag can be used with '-o -c change' to inspect an
	old stream client view. It yields the client spec that would have
	been created for the stream at the moment the change was recorded.

	A server of type 'build-server' (see 'p4 help server') is a replica
	which supports build farm integration, and the 'p4 client' command
	may be used to create or edit client workspaces on a build-server.
	Such workspaces may issue the 'p4 sync' command, in addition to any
	read-only command supported by the replica. For more information, run
	'p4 help buildserver'.

	When creating or editing a client workspace for a build-server,
	the client specified by the optional 'name' argument, as well as the
	client specified by the $P4CLIENT environment variable or via the
	global '-c client' argument must not exist, or must be restricted
	to this server; this command may not be used to create or edit a
	workspace that is not restricted to this build-server.

	In order to delete a workspace which is bound to a different server,
	specify 'client -d -f --serverid=X', providing the serverid of the
	owning server. This variant of the client command must be issued
	directly to the Commit Server.

	See 'p4 help-graph client' for information on using this command with
	graph depots.


    filelog -- List revision history of files

    p4 filelog [-c changelist# -h -i -l -L -t -m max -p -s] file[revRange] ...

	List the revision history of the specified files, from the most
	recent revision to the first.  If the file specification includes
	a revision, the command lists revisions at or prior to the specified
	revision.  If the file specification includes a revision range,
	the command lists only the specified revisions.
	See 'p4 help revisions' for details.

	The -c changelist# flag displays files submitted at the specified
	changelist number.

	The -i flag includes inherited file history. If a file was created by
	branching (using 'p4 integrate'), filelog lists the revisions of the
	file's ancestors up to the branch points that led to the specified
	revision.  File history inherited by renaming (using 'p4 move') is
	always displayed regardless of whether -i is specified.

	The -h flag displays file content history instead of file name
	history.  The list includes revisions of other files that were
	branched or copied (using 'p4 integrate' and 'p4 resolve -at') to
	the specified revision.  Revisions that were replaced by copying
	or branching are omitted, even if they are part of the history of
	the specified revision.

	The -t flag displays the time as well as the date.

	The -l flag lists the full text of the changelist descriptions.

	The -L flag lists the full text of the changelist descriptions,
	truncated to 250 characters if longer.

	The -m max displays at most 'max' revisions per file of the file[rev]
	argument specified.

	The -p flag is used in conjunction with the '-h' flag to prevent
	filelog from following content of promoted task streams. This flag
	is useful when there are many child task streams branched from the
	file argument supplied.

	The -s flag displays a shortened form of filelog that omits
	non-contributory integrations.

	See 'p4 help-graph filelog' for information on using this command with
	graph depots.


    sync -- Synchronize the client with its view of the depot
    flush -- synonym for 'sync -k'
    update -- synonym for 'sync -s'

    p4 sync [-f -L -n -N -k -q -r] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -q -s] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -p -q] [-m max] [file[revRange] ...]
            --parallel=threads=N[,batch=N][,batchsize=N][,min=N][,minsize=N]

	Sync updates the client workspace to reflect its current view (if
	it has changed) and the current contents of the depot (if it has
	changed). The client view maps client and depot file names and
	locations.

	Sync adds files that are in the client view and have not been
	retrieved before.  Sync deletes previously retrieved files that
	are no longer in the client view or have been deleted from the
	depot.  Sync updates files that are still in the client view and
	have been updated in the depot.

	By default, sync affects all files in the client workspace. If file
	arguments are given, sync limits its operation to those files.
	The file arguments can contain wildcards.

	If the file argument includes a revision specifier, then the given
	revision is retrieved.  Normally, the head revision is retrieved.

	If the file argument includes a revision range specification,
	only files selected by the revision range are updated, and the
	highest revision in the range is used.

	See 'p4 help revisions' for help specifying revisions or ranges.

	Normally, sync does not overwrite workspace files that the user has
	manually made writable.  Setting the 'clobber' option in the
	client specification disables this safety check.

	The -f flag forces resynchronization even if the client already
	has the file, and overwriting any writable files.  This flag doesn't
	affect open files.

	The -L flag can be used with multiple file arguments that are in
	full depot syntax and include a valid revision number. When this
	flag is used the arguments are processed together by building an
	internal table similar to a label. This file list processing is
	significantly faster than having to call the internal query engine
	for each individual file argument. However, the file argument syntax
	is strict and the command will not run if an error is encountered.

	The -n flag previews the operation without updating the workspace.

	The -N flag also previews the operation without updating the
	workspace, but reports only a summary of the work the sync would do.

	The -k flag updates server metadata without syncing files. It is
	intended to enable you to ensure that the server correctly reflects
	the state of files in the workspace while avoiding a large data
	transfer. Caution: an erroneous update can cause the server to
	incorrectly reflect the state of the workspace.

	The -p flag populates the client workspace, but does not update the
	server to reflect those updates.  Any file that is already synced or
	opened will be bypassed with a warning message.  This option is very
	useful for build clients or when publishing content without the
	need to track the state of the client workspace.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are not suppressed.

	The -r flag allows open files which are mapped to new locations
	in the depot to be reopened in the new location.  By default, open
	workspace files remain associated with the depot files that they were
	originally opened as.

	The -s flag adds a safety check before sending content to the client
	workspace.  This check uses MD5 digests to compare the content on the
	clients workspace against content that was last synced.  If the file
	has been modified outside of Perforce's control then an error message
	is displayed and the file is not overwritten.  This check adds some
	extra processing which will affect the performance of the operation.
	Clients with 'allwrite' and 'noclobber' set do this check by default.

	The -m flag limits sync to the first 'max' number of files. This
	option is useful in conjunction with tagged output and the '-n'
	flag, to preview how many files will be synced without transferring
	all the file data.

	The --parallel flag specifies options for parallel file transfer. If
	your administrator has enabled parallel file transfer by setting the
	net.parallel.max configurable, and if there are sufficient resources
	across the system, a sync command may execute more rapidly by
	transferring multiple files in parallel. Specify threads=N to request
	files be sent concurrently, using N independent network connections.
	The N threads grab work in batches; specify batch=N to control the
	number of files in a batch, or batchsize=N to control the number of
	bytes in a batch. A sync that is too small will not initiate parallel
	file transfers; specify min=N to control the minimum number of files
	in a parallel sync, or minsize=N to control the minimum number of
	bytes in a parallel sync. Requesting progress indicators causes the
	--parallel flag to be ignored.

	Auto parallel sync may be enabled by setting the net.parallel.threads
	configurable to the desired number of threads to be used by all sync
	commands. This value must be less than or equal to the value of
	net.parallel.max. Other net.parallel.* configurables may be specified
	as well, but are not required. See 'p4 help configurables' to see
	the options and their defaults. Auto parallel sync is turned off by
	unsetting the net.parallel.threads configurable. A user may override
	the configured auto parallel sync options on the command line, or may
	disable it via 'p4 sync --parallel=0'.

	See 'p4 help-graph sync' for information on using this command with
	graph depots.


    info -- Display client/server information

    p4 info [-s]

	Info lists information about the current client (user name,
	client name, applicable client root, client current directory,
	and the client IP address) and some server information (server
	IP address, server root, date, uptime, version and license data).

	The -s option produces 'short' output that omits any information
	that requires a database lookup such as the client root).


    branch -- Create, modify, or delete a branch view specification

    p4 branch [-f] name
    p4 branch -d [-f] name
    p4 branch [ -S stream ] [ -P parent ] -o name
    p4 branch -i [-f]

	A branch specification ('spec') is a named, user-defined mapping of
	depot files to depot files. It can be used with most of the commands
	that operate on two sets of files ('copy', 'merge', 'integrate',
	'diff2', etc.)

	Creating a branch spec does not branch files.  To branch files, use
	'p4 copy', with or without a branch spec.
	
	The 'branch' command puts the branch spec into a temporary file and
	invokes the editor configured by the environment variable $P4EDITOR.
	Saving the file creates or modifies the branch spec.

	The branch spec contains the following fields:

	Branch:      The branch spec name (read only).

	Owner:       The user who created this branch spec. Can be changed.

	Update:      The date this branch spec was last modified.

	Access:      The date of the last command used with this spec.

	Description: A description of the branch spec (optional).

	Options:     Flags to change the branch spec behavior. The defaults
		     are marked with *.

		locked   	Permits only the owner to change the spec.
		unlocked *	Prevents the branch spec from being deleted.

	View:        Lines mapping of one view of depot files to another.
		     Both the left and right-hand sides of the mappings refer
		     to the depot namespace.  See 'p4 help views' for more on
		     view syntax.

	New branch specs are created with a default view that maps all depot
	files to themselves.  This view must be changed before the branch
	spec can be saved.

	The -d flag deletes the named branch spec.

	The -o flag writes the branch spec to standard output. The user's
	editor is not invoked.

	The -i flag causes a branch spec to be read from the standard input.
	The user's editor is not invoked.

	The -f flag enables a user with 'admin' privilege to delete the spec
	or set the 'last modified' date.  By default, specs can be deleted
	only by their owner.

	A branch spec can also be used to expose the internally generated
	mapping of a stream to its parent. (See 'p4 help stream' and 'p4
	help streamintro'.)

	The -S stream flag will expose the internally generated mapping.
	The -P flag may be used with -S to treat the stream as if it were a
	child of a different parent. The -o flag is required with -S.


    change -- Create or edit a changelist description
    changelist -- synonym for 'change'

    p4 change [-s] [-f | -u] [[-O|-I] changelist#]
    p4 change -d [-f -s -O] changelist#
    p4 change -o [-s] [-f] [[-O|-I] changelist#]
    p4 change -i [-s] [-f | -u]
    p4 change -t restricted | public [-U user] [-f|-u|-O|-I] changelist#
    p4 change -U user [-t restricted | public] [-f] changelist#
    p4 change -d -f --serverid=X changelist#

	'p4 change' creates and edits changelists and their descriptions.
	With no argument, 'p4 change' creates a new changelist.  If a
	changelist number is specified, 'p4 change' edits an existing
	pending changelist.  In both cases, the changelist specification
	is placed into a form and the user's editor is invoked.

	The -d flag deletes a pending changelist, if it has no opened files
	and no pending fixes associated with it.  Use 'p4 opened -a' to
	report on opened files and 'p4 reopen' to move them to another
	changelist.  Use 'p4 fixes -c changelist#' to report on pending
	fixes and 'p4 fix -d -c changelist# jobs...' to delete pending
	fixes. The changelist can be deleted only by the user and client
	who created it, or by a user with 'admin' privilege using the -f
	flag.

	The -o flag writes the changelist specification to the standard
	output.  The user's editor is not invoked.

	The -i flag reads a changelist specification from the standard
	input.  The user's editor is not invoked.

	The -f flag forces the update or deletion of other users' pending
	changelists.  -f can also force the deletion of submitted changelists
	after they have been emptied of files using 'p4 obliterate'.  By
	default, submitted changelists cannot be changed.  The -f flag can
	also force display of the 'Description' field in a restricted
	changelist. Finally the -f flag can force changing the 'User' of
	an empty pending change via -U. The -f flag requires 'admin'
	access granted by 'p4 protect'.  The -f and -u flags are mutually
	exclusive.

	The -u flag can force the update of a submitted change by the owner
	of the change. Only the Jobs, Type, and Description fields can be
	changed	using the -u flag. The -f and -u flags cannot be used in
	the same change command.

	The -s flag extends the list of jobs to include the fix status
	for each job.  On new changelists, the fix status begins as the
	special status 'ignore', which, if left unchanged simply excludes
	the job from those being fixed.  Otherwise, the fix status, like
	that applied with 'p4 fix -s', becomes the job's status when
	the changelist is committed.  Note that this option exists
	to support integration with external defect trackers.

	The -O flag specifies that the changelist number is the original
	number of a changelist which was renamed on submit.

	The -I flag specifies that the changelist number is the Identity
	field of a changelist.

	The -U flag changes the 'User' of an empty pending change to the
	specified user. The user field can only be changed using this flag
	by the user who created the change, or by a user with 'admin'
	privilege using the -f flag. This option is useful for running
	in a trigger or script.

	The -t flag changes the 'Type' of the change to 'restricted'
	or 'public' without displaying the change form. This option is
	useful for running in a trigger or script.

	The 'Type' field can be used to hide the change or its description
	from users. Valid values for this field are 'public' (default), and
	'restricted'. A shelved or committed change that is 'restricted' is
	accessible only to users who own the change or have 'list' permission
	to at least one file in the change.  A pending (not shelved)
	restricted change is only accessible to its owner.  Public changes
	are accessible to all users. This setting affects the output of the
	'p4 change', 'p4 changes', and 'p4 describe' commands. Note that
	the '-S' flag is required with 'p4 describe' for the command to
	enforce shelved	rather than pending restricted changelist rules.

	If a user is not permitted to have access to a restricted change,
	The 'Description' text is replaced with a 'no permission' message
	(see 'Type' field). Users with admin permission can override the
	restriction using the -f flag.

	In order to delete a pending changelist which is owned by a client
	on a different server, specify 'change -d -f --serverid=X', providing
	the serverid of the owning server. This variant of the change command
	must be issued directly to the Commit Server.


    login -- Log in to Perforce by obtaining a session ticket

    p4 login [-a -p] [-h <host>] [user]
    p4 login [-s]
    p4 login [-a -p] -r <remotespec> [--remote-user=X]
    p4 login [-s] -r <remotespec> [--remote-user=X]

	The login command enables a user to access Perforce until the session
	expires or the user logs out.

	When a user logs in to Perforce, they are prompted for a password
	If they enter the correct password, they are issued a ticket.  The
	ticket expires when the default timeout value has been reached and
	is valid only for the host machine where the 'login' command was
	executed (see below for exception).

	The ticket can be used anywhere that a password can be used.

	Example: p4 -P <ticket value> changes -m1

	The -a flag causes the server to issue a ticket that is valid on all
	host machines.

	The -h flag causes the server to issue a ticket that is valid on the
	specified host (IP address).  This flag is typically used together
	with the -p flag to acquire a ticket that can be used on a different
	machine.

	The -p flag displays the ticket, but does not store it on the client
	machine.

	The -r flag causes the server to forward the login to the server
	referenced in the specified remote specification. The login will be for
	the user specified by the --remote-user flag, or if RemoteUser is set
	in the remote specification, the login will be for that user.
	Specifying a host or a username is not allowed when logging into a
	remote server.

	The -s flag displays the status of the current ticket (if there is
	one).

	Specifying a username as an argument to 'p4 login' requires 'super'
	access, which is granted by 'p4 protect'.  In this case, 'p4 login'
	does not prompt for the password (you must already be logged in).


    edit -- Open an existing file for edit

    p4 edit [-c changelist#] [-k -n] [-t filetype] [--remote=rmt] file ...

	Open an existing file for edit.  The server records the fact that
	the current user has opened the file in the current workspace, and
	changes the file permission from read-only to read/write.

	If -c changelist# is included, the file opened in the specified
	pending changelist.  If changelist number is omitted, the file is
	opened in the 'default' changelist.

	If -t filetype is specified, the file is assigned that Perforce
	filetype. Otherwise, the filetype of the previous revision is reused.
	If a partial filetype is specified, it is combined with the current
	filetype.For details, see 'p4 help filetypes'.
	Using a filetype of 'auto' will cause the filetype to be chosen
	as if the file were being added, that is the typemap will be
	considered and the file contents may be examined.

	The -n flag previews the operation without changing any files or
	metadata.

	The -k flag updates metadata without transferring files to the
	workspace. This option can be used to tell the server that files in
	a client workspace are already editable, even if they are not in the
	client view. Typically this flag is used to correct the Perforce
	server when it is wrong about the state of files in the client
	workspace, but incorrect use of this option can result in inaccurate
	file status information.

	The --remote flag is useful for DVCS configurations in which files
	of type +l are in use. 'p4 edit --remote=origin filename' opens the
	named file for edit in your DVCS server, and additionally, if the
	file is of type +l, takes a global exclusive lock on the origin
	server. That global exclusive lock will be retained until you push
	the updated file to the origin server, or until you use the
	'p4 revert --remote=origin filename' command to revert the file.

	'p4 edit' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph edit' for information on using this command with
	graph depots.


    job -- Create or edit a job (defect) specification

    p4 job [-f] [jobName]
    p4 job -d jobName
    p4 job -o [jobName]
    p4 job -i [-f]

	The 'p4 job' command creates and edits job specifications using an
	ASCII form. A job is a defect, enhancement, or other unit of
	intended work.The 'p4 fix' command associates changelists with jobs.

	With no arguments, 'p4 job' creates an empty job specification
	and invokes the user's editor.  When the specification is saved,
	a job name of the form jobNNNNNN is assigned.  If the jobName
	parameter is specified on the command line, the job is created or
	opened for editing.

	As jobs are entered or updated, all fields are indexed for searching
	Text fields are broken into individual alphanumeric words (punctuation
	and whitespace are ignored) and each word is case-folded and entered
	into the word index.  Date fields are converted to an internal
	representation (seconds since 1970/01/01 00:00:00) and entered
	into the date index.

	The fields that compose a job are defined by the 'p4 jobspec' command.
	Perforce provides a default job specification that you can edit.

	The -d flag deletes the specified job. You cannot delete a job if
	it has pending or submitted fixes associated with it.

	The -o flag writes the job specification to the standard output.
	The user's editor is not invoked.

	The -i flag reads a job specification from the standard input. The
	user's editor is not invoked.

	The -f flag enables you set fields that are read-only by default.
	The -f flag requires 'admin' access, which is granted using the
	'p4 protect' command.


    print -- Write a depot file to standard output

    p4 print [-a -A -k -o localFile -q -m max] file[revRange] ...
    p4 print -U unloadfile ...

	Retrieve the contents of a depot file to the client's standard output.
	The file is not synced.  If file is specified using client syntax,
	Perforce uses the client view to determine the corresponding depot
	file.

	By default, the head revision is printed.  If the file argument
	includes a revision, the specified revision is printed.  If the
	file argument has a revision range,  then only files selected by
	that revision range are printed, and the highest revision in the
	range is printed. For details about revision specifiers, see 'p4
	help revisions'.

	The -a flag prints all revisions within the specified range, rather
	than just the highest revision in the range.

	The -A flag prints files in archive depots.

	The -k flag suppresses keyword expansion.

	The -o localFile flag redirects the output to the specified file on
	the client filesystem. Multiple files may be written by using wildcards
	in the localFile argument that match wildcards in the file argument.

	The -q flag suppresses the initial line that displays the file name
	and revision.

	The -m flag limits print to the first 'max' number of files.

	The -U option prints files in the unload depot (see 'p4 help unload'
	for more information about the unload depot).

	See 'p4 help-graph print' for information on using this command with
	graph depots.


    cstat -- Dump change/sync status for current client

    p4 cstat [files...]

	Lists changes that are needed, had or partially synced in the current
	client. The output is returned in tagged format, similar to the fstat
	command.

	The fields that cstat displays are:

		change   changelist number
		status   'have', 'need' or 'partial'



    repo -- Create, modify, or delete a repo specification

    p4 repo [-f] repo
    p4 repo -d [-f] repo
    p4 repo -o repo
    p4 repo -i [-f]

	A repo specification describes the high-level configuration
	and usage of a repo.

	The 'repo' command puts the repo spec into a temporary file and
	invokes the editor configured by the environment variable $P4EDITOR.
	Saving the file creates or modifies the repo spec.

	The repo spec contains the following fields:

	Name:        The name of the repo

	Owner:       The user who created this repo spec. Can be changed.

	Created:     The date this repo spec was created.

	Pushed:      The last time this repo was pushed to.

	Description: A short description of the repo (optional).

	MirroredFrom: Upstream URL this read-only repo is mirrored from.

	DefaultBranch: The branch to include when cloning the repo.
           It must start with "refs/" if you want git to use it; eg,
           "refs/heads/trunk" rather than just "trunk".

	The -d flag deletes the named repo spec and files it contains.

	The -o flag writes the repo spec to standard output. The user's
	editor is not invoked.

	The -i flag causes a repo spec to be read from the standard input.
	The user's editor is not invoked.

	The -f flag enables a user with 'admin' privilege to delete the repo.
	By default, repos can be deleted only by their owner. The owner of a
	repo or a user with 'super' privilege can update the 'Owner' field
	of a repo using -f.



    interchanges -- Report changes not yet integrated

    p4 interchanges [options] fromFile[revRange] toFile
    p4 interchanges [options] -b branch [toFile[revRange] ...]
    p4 interchanges [options] -b branch -s fromFile[revRange] [toFile ...]
    p4 interchanges [options] -S stream [-P parent] [file[revRange] ...]

	options: -f -l -r -t -u -F

	'p4 interchanges' lists changes that have not been integrated from
	a set of source files to a set of target files.

	The -f option lists the individual files that require integration.
	For partially integrated changelists, files might be listed even if
	they have been integrated individually.

	The -l flag includes the full text of the changelist descriptions.

	The -t flag displays the time as well as the date.

	The -b flag makes 'p4 interchanges' use a user-defined branch view.
	(See 'p4 help branch'.) The source is the left side of the branch
	view and the target is the right side.  Used with the -r flag, the
	direction is reversed.

	The -s flag can be used with -b to cause fromFile to be treated as
	the source, and both sides of the branch view to be treated as the
	target, per the branch view mapping.  Optional toFile arguments may
	be given to further restrict the scope of the target file set.  The
	-r flag is ignored when -s is used.

	The -u flag limits results to those submitted by a particular user.

	The -S flag causes 'p4 interchanges' to use a generated branch view
	that maps a stream to its parent.  With -r, the direction of the
	mapping is reversed.  -P can be used to generate the branch view
	using a parent stream other than the stream's actual parent.  The -S
	flag also makes 'p4 interchanges' respect a stream's flow.

	The -F flag can be used with -S to force 'p4 interchanges' to ignore
	a stream's expected flow.  It can also force it to generate a branch
	view based on a virtual stream; the mapping itself refers to the
	underlying real stream.



    revert -- Discard changes from an opened file.

    p4 revert [-a -n -k -w -c changelist# -C client] [--remote=rmt] file ...

	Revert an open file to the revision that was synced from the depot,
	discarding any edits or integrations that have been made.  You must
	explicitly specify the files to be reverted.  Files are removed from
	the changelist in which they are open.  Locked files are unlocked.

	The -a flag reverts only files that are open for edit, add, or
	integrate and are unchanged or missing. Files with pending
	integration records are left open. The file arguments are optional
	when -a is specified.

	The -n flag displays a preview of the operation.

	The -k flag marks the file as reverted in server metadata without
	altering files in the client workspace.

	The -w flag causes files that are open for add to be deleted from the
	workspace when they are reverted.

	The -c flag reverts files that are open in the specified changelist.

	The -C flag allows a user to specify the workspace that has the file
	opened rather than defaulting to the current client workspace. When
	this option is used, the '-k' flag is also enabled and the check for
	matching user is disabled. The -C flag requires 'admin' access, which
	is granted by 'p4 protect'.

	The --remote flag is useful for DVCS configurations in which files
	of type +l are in use. 'p4 revert --remote=origin filename' reverts
	the named file in your DVCS server, and additionally, if the file is
	of type +l, releases the global exclusive lock on the file in the
	origin server.

	See 'p4 help-graph revert' for information on using this command with
	graph depots.


    sync -- Synchronize the client with its view of the depot
    flush -- synonym for 'sync -k'
    update -- synonym for 'sync -s'

    p4 sync [-f -L -n -N -k -q -r] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -q -s] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -p -q] [-m max] [file[revRange] ...]
            --parallel=threads=N[,batch=N][,batchsize=N][,min=N][,minsize=N]

	Sync updates the client workspace to reflect its current view (if
	it has changed) and the current contents of the depot (if it has
	changed). The client view maps client and depot file names and
	locations.

	Sync adds files that are in the client view and have not been
	retrieved before.  Sync deletes previously retrieved files that
	are no longer in the client view or have been deleted from the
	depot.  Sync updates files that are still in the client view and
	have been updated in the depot.

	By default, sync affects all files in the client workspace. If file
	arguments are given, sync limits its operation to those files.
	The file arguments can contain wildcards.

	If the file argument includes a revision specifier, then the given
	revision is retrieved.  Normally, the head revision is retrieved.

	If the file argument includes a revision range specification,
	only files selected by the revision range are updated, and the
	highest revision in the range is used.

	See 'p4 help revisions' for help specifying revisions or ranges.

	Normally, sync does not overwrite workspace files that the user has
	manually made writable.  Setting the 'clobber' option in the
	client specification disables this safety check.

	The -f flag forces resynchronization even if the client already
	has the file, and overwriting any writable files.  This flag doesn't
	affect open files.

	The -L flag can be used with multiple file arguments that are in
	full depot syntax and include a valid revision number. When this
	flag is used the arguments are processed together by building an
	internal table similar to a label. This file list processing is
	significantly faster than having to call the internal query engine
	for each individual file argument. However, the file argument syntax
	is strict and the command will not run if an error is encountered.

	The -n flag previews the operation without updating the workspace.

	The -N flag also previews the operation without updating the
	workspace, but reports only a summary of the work the sync would do.

	The -k flag updates server metadata without syncing files. It is
	intended to enable you to ensure that the server correctly reflects
	the state of files in the workspace while avoiding a large data
	transfer. Caution: an erroneous update can cause the server to
	incorrectly reflect the state of the workspace.

	The -p flag populates the client workspace, but does not update the
	server to reflect those updates.  Any file that is already synced or
	opened will be bypassed with a warning message.  This option is very
	useful for build clients or when publishing content without the
	need to track the state of the client workspace.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are not suppressed.

	The -r flag allows open files which are mapped to new locations
	in the depot to be reopened in the new location.  By default, open
	workspace files remain associated with the depot files that they were
	originally opened as.

	The -s flag adds a safety check before sending content to the client
	workspace.  This check uses MD5 digests to compare the content on the
	clients workspace against content that was last synced.  If the file
	has been modified outside of Perforce's control then an error message
	is displayed and the file is not overwritten.  This check adds some
	extra processing which will affect the performance of the operation.
	Clients with 'allwrite' and 'noclobber' set do this check by default.

	The -m flag limits sync to the first 'max' number of files. This
	option is useful in conjunction with tagged output and the '-n'
	flag, to preview how many files will be synced without transferring
	all the file data.

	The --parallel flag specifies options for parallel file transfer. If
	your administrator has enabled parallel file transfer by setting the
	net.parallel.max configurable, and if there are sufficient resources
	across the system, a sync command may execute more rapidly by
	transferring multiple files in parallel. Specify threads=N to request
	files be sent concurrently, using N independent network connections.
	The N threads grab work in batches; specify batch=N to control the
	number of files in a batch, or batchsize=N to control the number of
	bytes in a batch. A sync that is too small will not initiate parallel
	file transfers; specify min=N to control the minimum number of files
	in a parallel sync, or minsize=N to control the minimum number of
	bytes in a parallel sync. Requesting progress indicators causes the
	--parallel flag to be ignored.

	Auto parallel sync may be enabled by setting the net.parallel.threads
	configurable to the desired number of threads to be used by all sync
	commands. This value must be less than or equal to the value of
	net.parallel.max. Other net.parallel.* configurables may be specified
	as well, but are not required. See 'p4 help configurables' to see
	the options and their defaults. Auto parallel sync is turned off by
	unsetting the net.parallel.threads configurable. A user may override
	the configured auto parallel sync options on the command line, or may
	disable it via 'p4 sync --parallel=0'.

	See 'p4 help-graph sync' for information on using this command with
	graph depots.


    move -- move file(s) from one location to another
    rename -- synonym for 'move'

    p4 move [-c changelist#] [-f -n -k] [-t filetype] fromFile toFile
    p4 move -r [-c changelist#] [-n -k] fromFile toFile

	Move by default takes an already opened file and moves it from one
	client location to another, reopening it as a pending depot move.
	When the file is submitted with 'p4 submit', its depot file is moved
	accordingly.

	Wildcards in fromFile and toFile must match. The fromFile must be
	a file open for add or edit unless invoked with '-r'.

	'p4 opened' lists pending moves. 'p4 diff' can compare a moved
	client file with its depot original, 'p4 sync' can schedule an
	update of a moved file, and 'p4 resolve' can resolve the update.

	A client file can be moved many times before it is submitted.
	Moving a file back to its original location will undo a pending
	move, leaving unsubmitted content intact.  Using 'p4 revert'
	undoes the move and reverts the unsubmitted content.

	If -c changelist# is specified, the file is reopened in the
	specified pending changelist as well as being moved.

	The -f flag forces a move to an existing target file. The file
	must be synced and not opened.  The originating source file will
	no longer be synced to the client.

	If -t filetype is specified, the file is assigned that filetype.
	If the filetype is a partial filetype, the partial filetype is
	combined with the current filetype.  See 'p4 help filetypes'.

	The -n flag previews the operation without moving files.

	The -k flag performs the rename on the server without modifying
	client files. Use with caution, as an incorrect move can cause
	discrepancies between the state of the client and the corresponding
	server metadata.

	The -r flag may be used to rename existing files without altering
	content or type to a new target. This option allows the user to
	move files from the depot to a different location without opening
	the files first. Since this option performs a strict rename only,
	the '-t' and '-f' flags are not allowed, source files must not be
	already opened, and the targets must not already exist.

	The 'move' command requires a release 2009.1 or newer client. The
	'-f' flag requires a 2010.1 client.


    integrate -- Integrate one set of files into another

    p4 integrate [options] fromFile[revRange] toFile
    p4 integrate [options] -b branch [-r] [toFile[revRange] ...]
    p4 integrate [options] -b branch -s fromFile[revRange] [toFile ...]
    p4 integrate [options] -S stream [-r] [-P parent] [file[revRange] ...]

	options: -c changelist# -Di -f -h -O<flags> -n -m max -R<flags> -q -v

	'p4 integrate' integrates one set of files (the 'source') into
	another (the 'target').

	(See also 'p4 merge' and 'p4 copy', variants of 'p4 integrate' that
	may be easier and more effective for the task at hand.)

	Using the client workspace as a staging area, 'p4 integrate' adds and
	deletes target files per changes in the source, and schedules all
	other affected target files to be resolved.  Target files outside of
	the current client view are not affected. Source files need not be
	within the client view.

	'p4 resolve' must be used to merge file content, and to resolve
	filename and filetype changes. 'p4 submit' commits integrated files
	to the depot.  Unresolved files may not be submitted.  Integrations
	can be shelved with 'p4 shelve' and abandoned with 'p4 revert'.  The
	commands 'p4 integrated' and 'p4 filelog' display integration history.

	When 'p4 integrate' schedules a workspace file to be resolved, it
	leaves it read-only. 'p4 resolve' can operate on a read-only file.
	For other pre-submit changes, 'p4 edit' must be used to make the
	file writable.

	Source and target files can be specified either on the 'p4 integrate'
	command line or through a branch view. On the command line, fromFile
	is the source file set and toFile is the target file set.  With a
	branch view, one or more toFile arguments can be given to limit the
	scope of the target file set.

	revRange is a revision or a revision range that limits the span of
	source history to be probed for unintegrated revisions.  revRange
	can be used on fromFile, or on toFile, but not on both.  When used on
	toFile, it refers to source revisions, not to target revisions.  For
	details about revision specifiers, see 'p4 help revisions'.

	The -S flag makes 'p4 integrate' use a generated branch view that maps
	a stream (or its underlying real stream) to its parent.  With -r, the
	direction of the mapping is reversed.  -P can be used to generate the
	branch view using a parent stream other than the stream's actual
	parent.  Note that to submit integrated stream files, the current
	client must be switched to the target stream, or to a virtual child
	stream of the target stream.

	The -b flag makes 'p4 integrate' use a user-defined branch view.
	(See 'p4 help branch'.) The source is the left side of the branch view
	and the target is the right side. With -r, the direction is reversed.

	The -s flag can be used with -b to cause fromFile to be treated as
	the source, and both sides of the branch view to be treated as the
	target, per the branch view mapping.  Optional toFile arguments may
	be given to further restrict the scope of the target file set.  The
	-r flag is ignored when -s is used.

	Note that 'p4 integrate' automatically adusts source-to-target
	mappings for moved and renamed files.  (Adjustment occurs only if
	the 'p4 move' command was used to move/rename files.) The scope of
	source and target file sets must include both the old-named and the
	new-named files for mappings to be adjusted.  A filename resolve is
	scheduled for each remapped file to allow the target to be moved to
	match the source.

	The -f flag forces integrate to ignore integration history and treat
	all source revisions as unintegrated. It is meant to be used with
	revRange to force reintegration of specific, previously integrated
	revisions.

	The -O flags cause more information to be output for each file opened:

		-Ob	Show the base revision for the merge (if any).
		-Or	Show the resolve(s) that are being scheduled.

	The -R flags modify the way resolves are scheduled:

		-Rb	Schedules 'branch resolves' instead of branching new
			target files automatically.

		-Rd	Schedules 'delete resolves' instead of deleting
			target files automatically.

		-Rs	Skips cherry-picked revisions already integrated.
			This can improve merge results, but can also cause
			multiple resolves per file to be scheduled.

	The -Di flag modifies the way deleted revisions are treated.  If the
	source file has been deleted and re-added, revisions that precede
	the deletion will be considered to be part of the same source file.
	By default, re-added files are considered to be unrelated to the
	files of the same name that preceded them. When the source file has
	been moved or renamed, the move/add and move/delete revisions are
	propagated as branch and delete revisions.

	The -h flag leaves the target files at the revision currently synced
	to the client (the '#have' revision). By default, target files are
	automatically synced to the head revision by 'p4 integrate'.

	The -m flag limits integration to the first 'max' number of files.

	The -n flag displays a preview of integration, without actually
	doing anything.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are displayed.

	If -c changelist# is specified, the files are opened in the
	designated numbered pending changelist instead of the 'default'
	changelist.

	The -v flag causes a 'virtual' integration that does not modify
	client workspace files unless target files need to be resolved.
	After submitting a virtual integration, 'p4 sync' can be used to
	update the workspace.

	Integration is not supported for files with propagating attributes
	from an edge server in a distributed environment. Depending on the
	integration action, target, and source, either the integration or
	resolve command will fail.


    unshelve -- Restore shelved files from a pending change into a workspace

    p4 unshelve -s changelist# [options] [file ...]
	Options: [-A<f|s> -f -n] [-c changelist#]
	         [-b branch|-S stream [-P parent]]

	'p4 unshelve' retrieves shelved files from the specified pending
	changelist, opens them in a pending changelist and copies them
	to the invoking user's workspace.  Unshelving files from a pending
	changelist is restricted by the user's permissions on the files.
	A successful unshelve operation places the shelved files on the
	user's workspace with the same open action and pending integration
	history as if it had originated from that user and client.

	Unshelving a file over an already opened file is permitted if both
	shelved file and opened file are opened for 'edit'. In a distributed
	environment, the shelf must either be promoted or have been created
	on the same edge server. After unshelving, the workspace file is
	flagged as unresolved, and 'p4 resolve' must be run to resolve the
	differences between the shelved file and the workspace file.

	Unshelving a file opened for 'add' when the file already exists
	in the depot will result in the file being opened for edit. After
	unshelving, the workspace file is flagged as unresolved, and
	'p4 resolve' must be run to resolve the differences between the
	shelved file and the depot file at the head revision. Note that
	unshelving a file opened for 'add' over an already opened file is
	not supported.

	The -s flag specifies the number of the pending changelist that
	contains the shelved files.

	If a file pattern is specified, 'p4 unshelve' unshelves files that
	match the pattern.

	The -A flag specifies whether files and/or the stream spec (if any)
	associated with the shelved changelist should be unshelved to the
	current client; by default, the unshelve command acts on both the
	files (-Af) and the stream spec (-As).  (See 'p4 help streamcmds.)

	The -b flag specifies a branch spec that the shelved files will be
	mapped through prior to being unshelved, allowing files to be shelved
	in one branch and unshelved in another.  As with unshelving into an
	open file, it may be necessary to run 'p4 resolve'. In a distributed
	environment, an additional requirement is that the shelve was created
	on the same edge server.

	The -S flag uses a generated branch view to map the shelved files
	between the specified stream and its parent stream.  The -P flag
	can be used to generate the view using a parent stream other than
	the actual parent.

	The -c flag specifies the changelist to which files are unshelved.
	By default,  'p4 unshelve' opens shelved files in the default
	changelist.

	The -f flag forces the clobbering of any writeable but unopened files
	that are being unshelved.

	The -n flag previews the operation without changing any files or
	metadata.

	'p4 unshelve' is not supported for files with propagating attributes
	from an edge server in a distributed environment.


    describe -- Display a changelist description

    p4 describe [-d<flags> -a -m -s -S -f -O -I] changelist# ...

	Display a changelist description, including the changelist number,
	user, client, date of submission, textual description, list of
	affected files and diffs of files updated.  Pending changelists
	are indicated as 'pending' and file diffs are not displayed.

	For restricted changelists, 'no permission' is displayed if the user
	is not permitted to view the change (see 'p4 help change'). If a
	submitted change is restricted, the description is hidden unless
	the user is the owner of the change or has list permission for
	at least one file in the change. If a shelved change is restricted,
	the description is hidden unless the user is the owner of the change,
	or has list permission to at least one file in the change and has
	used the -S flag to request the shelved change. To view restricted
	pending (not shelved) changes, the user must be the owner of the
	change.

	The -a flag will display the content of added files in addition
	to diff of updated files.

	The -d<flags> passes one or more flags to the built-in diff routine
	to modify the output: -dn (RCS), -dc[n] (context), -ds (summary),
	-du[n] (unified), -db (ignore whitespace changes), -dw (ignore
	whitespace), -dl (ignore line endings). The optional argument to
	to -dc/-du specifies number of context lines.

	The -s flag omits the diffs of files that were updated.

	The -S flag lists files that are shelved for the specified changelist
	and displays diffs of the files against their previous revision.
	If the change is restricted, the description is displayed according
	to the rules for shelved restricted changes described above.

	The -f flag forces display of the descriptions in a restricted
	change.  The -f flag requires 'admin' access, which is granted
	using 'p4 protect'.

	The -O flag specifies that the changelist number is the original
	number of a changelist which was renamed on submit.

	The -I flag specifies that the changelist number is the Identity
	field of a changelist.

	The -m flag limits files to the first 'max' number of files.

	See 'p4 help-graph describe' for information on using this command with
	graph depots.


    protect -- Modify protections in the server namespace

    p4 protect [path]
    p4 protect -o [path]
    p4 protect -i [path]

	'p4 protect' edits the protections table in a text form.

	Each line in the table contains a protection mode, a group/user
	indicator, the group/user name, client host ID and a depot file
	path pattern. Users receive the highest privilege that is granted
	on any line.

	Note: remote depots are accessed using the pseudo-user 'remote'.
	To control access from other servers that define your server as
	a remote server, grant appropriate permissions to the 'remote' user.

	    Mode:    The permission level or right being granted or denied.
		     Each permission level includes all the permissions above
		     it, except for 'review' and 'owner'. Each permission only
		     includes the specific right and no lesser rights.  This
		     approach enables you to deny individual rights without
		     having to re-grant lesser rights. Modes prefixed by '='
		     are rights. All other modes are permission levels.

		     Valid modes are:

		     list    - users can see names but not contents of files;
			       users can see all non-file related metadata
			       (clients, users, changelists, jobs, etc.)

		     read    - users can sync, diff, and print files

		     open    - users can open files (add, edit, delete,
			       integrate)

		     write   - users can submit open files

		     admin   - permits those administrative commands and
			       command options that don't affect the server's
			       security.

		     owner   - allows access to the 'p4 protect' command, for
			       the specified path.

		     super   - access to all commands and command options.

		     review  - permits access to the 'p4 review' command;
			       implies read access

		     =read   - if this right is denied, users can't sync,
			       diff, or print files

		     =branch - if this right is denied, users are not
			       permitted to use files as a source
			       for 'p4 integrate'

		     =open   - if this right is denied, users cannot open
			       files (add, edit, delete, integrate)

		     =write  - if this right is denied, users cannot submit
			       open files

	    Group/User indicator: specifies the grantee is a group or user.

	    Name:    A Perforce group or user name; can include wildcards.

	    Host:    The IP address of a client host; can include wildcards.

	             The server can distinguish connections coming from a
	             proxy, broker, or replica. The server prepends the string
	             'proxy-' to the IP address of the true client of such
	             a connection when the server enforces the protections.

	             Specify the 'proxy-' prefix for the IP address in the
	             Host: field in the protections table to indicate the
	             protections that should thus apply.

	             For example, 'proxy-*' applies to all connections from
	             all proxies, brokers, and replicas, while
	             'proxy-10.0.0.5' identifies a client machine with an IP
	             address of 10.0.0.5 which is connecting to p4d through
	             a proxy, broker, or replica.

	             If you wish to write a single set of protections entries
	             which apply both to directly-connected clients as well
	             as to those which connect via a proxy, broker, or
	             replica, you can omit the 'proxy-' prefix and also set
	             dm.proxy.protects=0. In this case, the 'proxy-' prefix
	             is not prepended to the IP address of connections which
	             are made via a proxy, replica or broker.  Note that in
	             this scenario, all intermediate proxies, brokers, and
	             replicas should be at release 2012.1 or higher.

	    Path:    The part of the depot to which access is being granted
	             or denied.  To deny access to a depot path, preface the
	             path with a "-" character. These exclusionary mappings
	             apply to all access levels, even if only one access
	             level is specified in the first field.


	There are two additional fields in the protect specification that are
	not part of the protections table:

	    SubPath: The root path of the sub-protections table (only used when
	             editing a sub-protections table).

	    Update:  The date this specification was last modified (read-only).
	             If this date is modified, the protections table will not
	             be saved; however, ommitting this field will avoid the
	             modification check.


	Sub-protections tables:
	    It is possible to delegate management of parts of the protections
	    table to non-super users or groups by creating an entry with the
	    mode 'owner'.  These entries must have a unique path, without
	    wildcards except for a trailing '...'.  Users with 'super' or that
	    have been granted 'owner' for a path may run the 'p4 protect'
	    command specifying the granted path as an argument to access the
	    sub-protections table for that path.  Any entries in this table
	    will be appended to the effective protections table directly below
	    the 'owner' entry; if an 'owner' entry is removed, so are any
	    entries in the sub-protections table for that path.  The 'owner'
	    permission only grants access to the sub-protections table at the
	    specified path: it does not grant the specified user or group any
	    permissions on that path.  The owner may grant themselves 'admin'
	    permissions on that path.  Neither 'owner' nor 'super' entries may
	    be added to a sub-protections table, and any other entries' paths
	    must be within the scope of the sub-protections table's path.


	If a path argument is specified, and an 'owner' entry with the same
	path exists, then the sub-protections table for that path will be
	accessed instead of the main protections table.

	The -o flag writes the protection table to the standard output.
	The user's editor is not invoked.

	The -i flag reads the protection table from the standard input.
	The user's editor is not invoked.

	After protections are defined, 'p4 protect' requires 'super' or 'owner'
	access.


    change -- Create or edit a changelist description
    changelist -- synonym for 'change'

    p4 change [-s] [-f | -u] [[-O|-I] changelist#]
    p4 change -d [-f -s -O] changelist#
    p4 change -o [-s] [-f] [[-O|-I] changelist#]
    p4 change -i [-s] [-f | -u]
    p4 change -t restricted | public [-U user] [-f|-u|-O|-I] changelist#
    p4 change -U user [-t restricted | public] [-f] changelist#
    p4 change -d -f --serverid=X changelist#

	'p4 change' creates and edits changelists and their descriptions.
	With no argument, 'p4 change' creates a new changelist.  If a
	changelist number is specified, 'p4 change' edits an existing
	pending changelist.  In both cases, the changelist specification
	is placed into a form and the user's editor is invoked.

	The -d flag deletes a pending changelist, if it has no opened files
	and no pending fixes associated with it.  Use 'p4 opened -a' to
	report on opened files and 'p4 reopen' to move them to another
	changelist.  Use 'p4 fixes -c changelist#' to report on pending
	fixes and 'p4 fix -d -c changelist# jobs...' to delete pending
	fixes. The changelist can be deleted only by the user and client
	who created it, or by a user with 'admin' privilege using the -f
	flag.

	The -o flag writes the changelist specification to the standard
	output.  The user's editor is not invoked.

	The -i flag reads a changelist specification from the standard
	input.  The user's editor is not invoked.

	The -f flag forces the update or deletion of other users' pending
	changelists.  -f can also force the deletion of submitted changelists
	after they have been emptied of files using 'p4 obliterate'.  By
	default, submitted changelists cannot be changed.  The -f flag can
	also force display of the 'Description' field in a restricted
	changelist. Finally the -f flag can force changing the 'User' of
	an empty pending change via -U. The -f flag requires 'admin'
	access granted by 'p4 protect'.  The -f and -u flags are mutually
	exclusive.

	The -u flag can force the update of a submitted change by the owner
	of the change. Only the Jobs, Type, and Description fields can be
	changed	using the -u flag. The -f and -u flags cannot be used in
	the same change command.

	The -s flag extends the list of jobs to include the fix status
	for each job.  On new changelists, the fix status begins as the
	special status 'ignore', which, if left unchanged simply excludes
	the job from those being fixed.  Otherwise, the fix status, like
	that applied with 'p4 fix -s', becomes the job's status when
	the changelist is committed.  Note that this option exists
	to support integration with external defect trackers.

	The -O flag specifies that the changelist number is the original
	number of a changelist which was renamed on submit.

	The -I flag specifies that the changelist number is the Identity
	field of a changelist.

	The -U flag changes the 'User' of an empty pending change to the
	specified user. The user field can only be changed using this flag
	by the user who created the change, or by a user with 'admin'
	privilege using the -f flag. This option is useful for running
	in a trigger or script.

	The -t flag changes the 'Type' of the change to 'restricted'
	or 'public' without displaying the change form. This option is
	useful for running in a trigger or script.

	The 'Type' field can be used to hide the change or its description
	from users. Valid values for this field are 'public' (default), and
	'restricted'. A shelved or committed change that is 'restricted' is
	accessible only to users who own the change or have 'list' permission
	to at least one file in the change.  A pending (not shelved)
	restricted change is only accessible to its owner.  Public changes
	are accessible to all users. This setting affects the output of the
	'p4 change', 'p4 changes', and 'p4 describe' commands. Note that
	the '-S' flag is required with 'p4 describe' for the command to
	enforce shelved	rather than pending restricted changelist rules.

	If a user is not permitted to have access to a restricted change,
	The 'Description' text is replaced with a 'no permission' message
	(see 'Type' field). Users with admin permission can override the
	restriction using the -f flag.

	In order to delete a pending changelist which is owned by a client
	on a different server, specify 'change -d -f --serverid=X', providing
	the serverid of the owning server. This variant of the change command
	must be issued directly to the Commit Server.


    aliases -- Display the list of aliases from the P4ALIASES file.

	The aliases file can be used to define command line aliases.

	When using the p4 command line tool, each command you enter is
	transformed by any alias definitions in your aliases file prior
	to being sent to the server for execution.

	Typical uses of aliases include: abbreviating complex commands;
	displaying command results in alternate output formats; automating
	simple multi-command sequences; and providing alternate syntax
	for commands you find hard to remember.

	The name of the aliases file is ~/.p4aliases on non-Windows platforms
	and %USERPROFILE%\p4aliases.txt on Windows platforms; this
	can be overridden using the P4ALIASES environment variable.

	Your aliases file can contain as many aliases as you want, in any
	order, specified one per line in the format:

	    alias = transformation

	Your aliases file can also contain comments: if the first non-blank
	character on a line is '#', the entire line is treated as a comment.

	When you issue a command which matches one of your aliases, the
	command is automatically modified by applying the transformation
	before issuing the command.

	Alias matching is case-sensitive even on otherwise case-insensitive
	platforms.

	The transformation can be a simple replacement:

	    commit = submit
	    halt = admin shutdown

	Certain characters in an alias definition have special meaning:
	    =      : separates the alias and its transformation
	    $(var) : denotes a named variable
	    &&     : separates two commands in a multi-command alias
	    >      : directs the output of a command to a variable
	    <      : directs the input of a command from a variable
	    \      : indicates the transformation continues on the next line

	The transformation can thus be more complex, and result in multiple
	commands issued to the server:

	    show-status = monitor show && lockstat && changes -m 1

	The transformation can include parameter substitutions:

	    myChanges = changes -u $(P4USER)

	The parameters can be arguments to the alias:

	    my-recent-changes $(max) = changes -u $(P4USER) -m $(max)

	The special built-in variables $(EQ), $(LT), and $(GT) expand
	to =, <, and >, respectively.

	Complex aliases are possible, and often involve using the output
	of one command as input to another:

	    show-last-change=-F "%change%" -ztag changes -m 1 \
	                         -s submitted > $(chg) &&
	                     describe -s $(chg)

	    reopenCL $(cl) = -F "%depotFile%" -ztag files @$(EQ)$(cl) \
	                         > $(files) &&
	                     -x - edit < $(files)



    depots -- Lists defined depots

    p4 depots [-t type] [[-e|-E] nameFilter]

	The depots command lists all depots defined in the server.

	The -t flag limits output to depots of the specified type.

	The -e nameFilter flag lists depots with a name that matches
	the nameFilter pattern, for example: -e 'depo*'. The -e flag
	uses the server's normal case-sensitivity rules. The -E flag makes
	the matching case-insensitive, even on a case-sensitive server.


    reconcile -- Open files for add, delete, and/or edit to reconcile
                 client with workspace changes made outside of Perforce

    rec         -- synonym for 'reconcile'
    status      -- 'reconcile -n + opened' (output uses local paths)
    status -A   -- synonym for 'reconcile -ead' (output uses local paths)

    clean       -- synonym for 'reconcile -w'

    p4 reconcile [-c change#] [-e -a -d -f -I -l -m -n -w] [file ...]
    p4 status [-c change#] [-A | [-e -a -d] | [-s]] [-f -I -m] [file ...]
    p4 clean [-e -a -d -I -l -n] [file ...]
    p4 reconcile -k [-l -n] [file ...]
    p4 status -k [file ...]

	'p4 reconcile' finds unopened files in a client's workspace and
	detects the following:

	1. files in depot missing from workspace, but still on have list
	2. files on workspace that are not in depot
	3. files modified in workspace that are not opened for edit

	By default, the files matching each condition above in the path
	are reconciled by opening files for delete (scenario 1), add
	(scenario 2), and/or edit (scenario 3). The -e, -a, and -d flags
	may be used to limit to a subset of these operations. If no file
	arguments are given, reconcile and status default to the current
	working directory.

	If the list of files to be opened includes both adds and deletes,
	the missing and added files will be compared and converted to pairs
	of move/delete and move/add operations if they are similar enough.

	In addition to opening unopened files, reconcile will detect files
	that are currently opened for edit but missing from the workspace
	and reopen them for delete. Reconcile will also detect files opened
	for delete that are present on the workspace and reopen them for
	edit.

	The -n flag previews the operation without performing any action.
	Although metadata updates from reconcile require open permission,
	the preview commands only require read access.

	If -c changelist# is included, the files are opened in the specified
	pending changelist.

	The -e flag allows the user to reconcile files that have been
	modified outside of Perforce. The reconcile command will open
	these files for edit.

	The -a flag allows the user to reconcile files that are in the
	user's directory that are not under Perforce source control. These
	files are opened for add.

	The -f flag allows the user to add files with filenames that contain
	wildcard characters. Filenames that contain the special characters
	'@', '#', '%' or '*' are reformatted to encode the characters using
	ASCII hexadecimal representation.  After the files are added, you
	must refer to them using the reformatted file name, because Perforce
	does not recognize the local filesystem name.

	The -I flag informs the client that it should not perform any ignore
	checking configured by P4IGNORE.

	The -d flag allows the user to reconcile files that have been
	removed from the user's directory but are still in the depot.
	These files will be opened for delete only if they are still on the
	user's have list.

	The -l flag requests output in local file syntax using relative
	paths, similar to the workspace-centric view provided by 'status'.

	The -m flag used in conjunction with -e can be used to minimize
	costly digest computation on the client by checking file modification
	times before checking digests to determine if files have been
	modified outside of Perforce.

	The -w flag forces the workspace files to be updated to match the
	depot rather than opening them so that the depot can be updated to
	match the workspace.  Files that are not under source control will
	be deleted, and modified or deleted files will be refreshed.  Note
	that this operation will result in the loss of any changes made to
	unopened files. This option requires read permission.

	The -k flag updates the have list when files in the workspace but
	not on the have list match content of corresponding files in the
	depot. In this case, the client's have list is updated to reflect
	the matching revisions. This option is used to reconcile the have
	list with the workspace.

	The -s flag (only used with 'p4 status') requests summarized
	output for the files to be opened for 'add'. Files in the current
	directory are listed as usual, but subdirectories containing files
	to be opened for 'add' are displayed instead of each file. This
	optimized option doesn't support move detection. Files to open
	for 'delete' and 'edit' are still listed individually.

	The status command displays preview output which includes files
	which are already opened in addition to the files that need to
	be reconciled. Opened files are not shown with options -A/-a/-e/-d.

	'p4 reconcile' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph reconcile' for information on using this command
	with graph depots.


    repos -- Display list of repo specifications

    p4 repos [[-e|-E] nameFilter] [-m max] [-u user] [-O owner]
             [--from=origin]

	Lists repo specifications. (See 'p4 help repo'.)

	The -e nameFilter flag lists repo specs with a name that matches
	the nameFilter pattern, for example: -e '//linux/kernel/...'.

	The -e flag uses the server's normal case-sensitivity rules.

	The -E flag makes the matching case-insensitive, even on a
	case-sensitive server.

	The -m max flag limits output to the specified number of repo specs.

	The -O owner flag limits output to repos owned by the specified user
	or group.

	The -u user flag limits output to those repos that can be read by the
	specified user.

	The --from=origin flag limits output to repos which were forked from
	the specified repo.



    diff2 -- Diff utility for comparing the content at two depot paths.
    (For comparing workspace content to depot content, see p4 diff.)

    p4 diff2 [options] fromFile[rev] toFile[rev]
    p4 diff2 [options] -b branch [[fromFile[rev]] toFile[rev]]
    p4 diff2 [options] [-S stream] [-P parent] [[fromFile[rev]] toFile[rev]]

    	options: -d<flags> -Od -q -t -u

	'p4 diff2' runs on the server to compare one set of depot files (the
	'source') to another (the 'target').  Source and target file sets
	can be specified on the 'p4 diff2' command line or through a branch
	view.

	With a branch view, fromFile and toFile are optional; fromFile limits
	the scope of the source file set, and toFile limits the scope of the
	target. If only one file argument is given, it is assumed to be
	toFile.

	fromFile and toFile can include revision specifiers; by default, the
	head revisions are diffed.  See 'p4 help revisions' for details
	about specifying file revisions.

	'p4 diff2' precedes each diffed file pair with a header line of the
	following form:

	    ==== source#rev (type) - target#rev (type) ==== summary

	A source or target file shown as '<none>' means there is no file
	at the specified name or revision to pair with its counterpart.
	The summary status is one of the following: 'identical' means file
	contents and types are identical, 'types' means file contents are
	identical but the types are different, and 'content' means file
	contents are different.

	The -b flag makes 'p4 diff2' use a user-defined branch view.  (See
	'p4 help branch'.) The left side of the branch view is the source
	and the right side is the target.

	The -S flag makes 'p4 diff2' use a generated branch view that maps
	a stream (or its underlying real stream) to its parent.  This defaults
	to the current client's stream, if applicable.  -P can be used to
	generate the branch view using a parent stream other than the stream's
	actual parent.

	The -d<flags> modify the output of diffs as follows:

		-dn (RCS)
		-dc[n] (context)
		-ds (summary)
		-du[n] (unified)
		-db (ignore whitespace changes)
		-dw (ignore whitespace)
		-dl (ignore line endings).

	The optional argument to -dc/-du specifies number of context lines.

	The -Od flag limits output to files that differ.

	The -q omits files that have identical content and types and
	suppresses the actual diff for all files.

	The -t flag forces 'p4 diff2' to diff binary files.

	The -u flag uses the GNU diff -u format and displays only files
	that differ. The file names and dates are in Perforce syntax, but
	the output can be used by the patch program.

	See 'p4 help-graph diff2' for information on using this command with
	graph depots.


    sync -- Synchronize the client with its view of the depot
    flush -- synonym for 'sync -k'
    update -- synonym for 'sync -s'

    p4 sync [-f -L -n -N -k -q -r] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -q -s] [-m max] [file[revRange] ...]
    p4 sync [-L -n -N -p -q] [-m max] [file[revRange] ...]
            --parallel=threads=N[,batch=N][,batchsize=N][,min=N][,minsize=N]

	Sync updates the client workspace to reflect its current view (if
	it has changed) and the current contents of the depot (if it has
	changed). The client view maps client and depot file names and
	locations.

	Sync adds files that are in the client view and have not been
	retrieved before.  Sync deletes previously retrieved files that
	are no longer in the client view or have been deleted from the
	depot.  Sync updates files that are still in the client view and
	have been updated in the depot.

	By default, sync affects all files in the client workspace. If file
	arguments are given, sync limits its operation to those files.
	The file arguments can contain wildcards.

	If the file argument includes a revision specifier, then the given
	revision is retrieved.  Normally, the head revision is retrieved.

	If the file argument includes a revision range specification,
	only files selected by the revision range are updated, and the
	highest revision in the range is used.

	See 'p4 help revisions' for help specifying revisions or ranges.

	Normally, sync does not overwrite workspace files that the user has
	manually made writable.  Setting the 'clobber' option in the
	client specification disables this safety check.

	The -f flag forces resynchronization even if the client already
	has the file, and overwriting any writable files.  This flag doesn't
	affect open files.

	The -L flag can be used with multiple file arguments that are in
	full depot syntax and include a valid revision number. When this
	flag is used the arguments are processed together by building an
	internal table similar to a label. This file list processing is
	significantly faster than having to call the internal query engine
	for each individual file argument. However, the file argument syntax
	is strict and the command will not run if an error is encountered.

	The -n flag previews the operation without updating the workspace.

	The -N flag also previews the operation without updating the
	workspace, but reports only a summary of the work the sync would do.

	The -k flag updates server metadata without syncing files. It is
	intended to enable you to ensure that the server correctly reflects
	the state of files in the workspace while avoiding a large data
	transfer. Caution: an erroneous update can cause the server to
	incorrectly reflect the state of the workspace.

	The -p flag populates the client workspace, but does not update the
	server to reflect those updates.  Any file that is already synced or
	opened will be bypassed with a warning message.  This option is very
	useful for build clients or when publishing content without the
	need to track the state of the client workspace.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are not suppressed.

	The -r flag allows open files which are mapped to new locations
	in the depot to be reopened in the new location.  By default, open
	workspace files remain associated with the depot files that they were
	originally opened as.

	The -s flag adds a safety check before sending content to the client
	workspace.  This check uses MD5 digests to compare the content on the
	clients workspace against content that was last synced.  If the file
	has been modified outside of Perforce's control then an error message
	is displayed and the file is not overwritten.  This check adds some
	extra processing which will affect the performance of the operation.
	Clients with 'allwrite' and 'noclobber' set do this check by default.

	The -m flag limits sync to the first 'max' number of files. This
	option is useful in conjunction with tagged output and the '-n'
	flag, to preview how many files will be synced without transferring
	all the file data.

	The --parallel flag specifies options for parallel file transfer. If
	your administrator has enabled parallel file transfer by setting the
	net.parallel.max configurable, and if there are sufficient resources
	across the system, a sync command may execute more rapidly by
	transferring multiple files in parallel. Specify threads=N to request
	files be sent concurrently, using N independent network connections.
	The N threads grab work in batches; specify batch=N to control the
	number of files in a batch, or batchsize=N to control the number of
	bytes in a batch. A sync that is too small will not initiate parallel
	file transfers; specify min=N to control the minimum number of files
	in a parallel sync, or minsize=N to control the minimum number of
	bytes in a parallel sync. Requesting progress indicators causes the
	--parallel flag to be ignored.

	Auto parallel sync may be enabled by setting the net.parallel.threads
	configurable to the desired number of threads to be used by all sync
	commands. This value must be less than or equal to the value of
	net.parallel.max. Other net.parallel.* configurables may be specified
	as well, but are not required. See 'p4 help configurables' to see
	the options and their defaults. Auto parallel sync is turned off by
	unsetting the net.parallel.threads configurable. A user may override
	the configured auto parallel sync options on the command line, or may
	disable it via 'p4 sync --parallel=0'.

	See 'p4 help-graph sync' for information on using this command with
	graph depots.


    reconcile -- Open files for add, delete, and/or edit to reconcile
                 client with workspace changes made outside of Perforce

    rec         -- synonym for 'reconcile'
    status      -- 'reconcile -n + opened' (output uses local paths)
    status -A   -- synonym for 'reconcile -ead' (output uses local paths)

    clean       -- synonym for 'reconcile -w'

    p4 reconcile [-c change#] [-e -a -d -f -I -l -m -n -w] [file ...]
    p4 status [-c change#] [-A | [-e -a -d] | [-s]] [-f -I -m] [file ...]
    p4 clean [-e -a -d -I -l -n] [file ...]
    p4 reconcile -k [-l -n] [file ...]
    p4 status -k [file ...]

	'p4 reconcile' finds unopened files in a client's workspace and
	detects the following:

	1. files in depot missing from workspace, but still on have list
	2. files on workspace that are not in depot
	3. files modified in workspace that are not opened for edit

	By default, the files matching each condition above in the path
	are reconciled by opening files for delete (scenario 1), add
	(scenario 2), and/or edit (scenario 3). The -e, -a, and -d flags
	may be used to limit to a subset of these operations. If no file
	arguments are given, reconcile and status default to the current
	working directory.

	If the list of files to be opened includes both adds and deletes,
	the missing and added files will be compared and converted to pairs
	of move/delete and move/add operations if they are similar enough.

	In addition to opening unopened files, reconcile will detect files
	that are currently opened for edit but missing from the workspace
	and reopen them for delete. Reconcile will also detect files opened
	for delete that are present on the workspace and reopen them for
	edit.

	The -n flag previews the operation without performing any action.
	Although metadata updates from reconcile require open permission,
	the preview commands only require read access.

	If -c changelist# is included, the files are opened in the specified
	pending changelist.

	The -e flag allows the user to reconcile files that have been
	modified outside of Perforce. The reconcile command will open
	these files for edit.

	The -a flag allows the user to reconcile files that are in the
	user's directory that are not under Perforce source control. These
	files are opened for add.

	The -f flag allows the user to add files with filenames that contain
	wildcard characters. Filenames that contain the special characters
	'@', '#', '%' or '*' are reformatted to encode the characters using
	ASCII hexadecimal representation.  After the files are added, you
	must refer to them using the reformatted file name, because Perforce
	does not recognize the local filesystem name.

	The -I flag informs the client that it should not perform any ignore
	checking configured by P4IGNORE.

	The -d flag allows the user to reconcile files that have been
	removed from the user's directory but are still in the depot.
	These files will be opened for delete only if they are still on the
	user's have list.

	The -l flag requests output in local file syntax using relative
	paths, similar to the workspace-centric view provided by 'status'.

	The -m flag used in conjunction with -e can be used to minimize
	costly digest computation on the client by checking file modification
	times before checking digests to determine if files have been
	modified outside of Perforce.

	The -w flag forces the workspace files to be updated to match the
	depot rather than opening them so that the depot can be updated to
	match the workspace.  Files that are not under source control will
	be deleted, and modified or deleted files will be refreshed.  Note
	that this operation will result in the loss of any changes made to
	unopened files. This option requires read permission.

	The -k flag updates the have list when files in the workspace but
	not on the have list match content of corresponding files in the
	depot. In this case, the client's have list is updated to reflect
	the matching revisions. This option is used to reconcile the have
	list with the workspace.

	The -s flag (only used with 'p4 status') requests summarized
	output for the files to be opened for 'add'. Files in the current
	directory are listed as usual, but subdirectories containing files
	to be opened for 'add' are displayed instead of each file. This
	optimized option doesn't support move detection. Files to open
	for 'delete' and 'edit' are still listed individually.

	The status command displays preview output which includes files
	which are already opened in addition to the files that need to
	be reconciled. Opened files are not shown with options -A/-a/-e/-d.

	'p4 reconcile' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph reconcile' for information on using this command
	with graph depots.


    populate -- Branch a set of files as a one-step operation

    p4 populate [options] fromFile[rev] toFile
    p4 populate [options] -b branch [-r] [toFile[rev]]
    p4 populate [options] -b branch -s fromFile[rev] [toFile]
    p4 populate [options] -S stream [-P parent] [-r] [toFile[rev]]

	options: -d description -f -m max -n -o

	'p4 populate' branches a set of files (the 'source') into another depot
	location (the 'target') in a single step.  The new files are created
	immediately, without requiring a 'p4 submit' or a client workspace.

	The target must be completely empty of files, including deleted files.

	Source and target files (fromFile and toFile) can be specified on
	the command line or through a branch view.  On the command line,
	fromFile is the source file set and toFile is the target file set.
	With a branch view, a toFile argument can be given to limit the scope
	of the target file set.

	A revision specifier can be used to select the revision to branch; by
	default, the head revision is branched. The revision specifier can be
	used on fromFile, or on toFile, but not on both.  When used on toFile,
	it refers to source revisions, not to target revisions.  A range may
	not be used as a revision specifier.  For revision syntax, see 'p4
	help revisions'.

	Use 'p4 populate -r -S' to branch a child stream from its parent.
	The -S flag makes 'p4 populate' use a generated branch view that maps
	the stream (or its underlying real stream) to its parent.  With -r,
	the direction of the mapping is reversed.  -P can be used to generate
	the branch view using a parent stream other than the stream's actual
	parent.

	The -b flag makes 'p4 populate' use a user-defined branch view.  (See
	'p4 help branch'.) The source is the left side of the branch view
	and the target is the right side. With -r, the direction is reversed.

	The -s flag can be used with -b to cause fromFile to be treated as
	the source, and both sides of the user-defined branch view to be
	treated as the target, per the branch view mapping.  An optional
	toFile argument may be given to further restrict the scope of the
	target file set.  -r is ignored when -s is used.

	The -d flag specifies a description for the submitted changelist.

	The -f flag forces deleted files to be branched into the target.
	By default, deleted files are treated as nonexistent and simply
	skipped.

	The -n flag displays a preview of the operation, without actually
	doing anything.

	The -o flag displays a list of files created by the populate command.

	The -m flag limits the actions to the first 'max' number of files.


    prune -- Remove unmodified branched files from a stream

    p4 prune -d [-y] -S stream

	Prune permanently removes unmodified files from a stream that is
	no longer being actively used.  Only the owner of a stream may
	'p4 prune' it.

	After a stream has been pruned, files that have been modified, i.e.
	files with more than one revision, will remain in the stream so that
	their edit history will be preserved.  The unmodified files will be
	gone as if obliterated by an administrator (see 'p4 help obliterate').

	Mainline, task, and virtual streams may not be pruned.  To remove
	unmodified files from a task stream, delete or unload it (see 'p4 help
	stream' and 'p4 help unload').

	Pruned files will remain in client workspaces until the next 'p4 sync',
	which will remove them.  If pruned files have been branched to a child
	stream, new integration records will be generated to directly link the
	branched files in the child stream to the files in the parent stream
	that they were previously related to indirectly.

	If the -d flag is given, the prune is more aggressive and performs a
	deep prune which will include removing files that have not only been
	branched, but also files that have been merged down multiple times
	from the parent stream but never edited in the child stream.

	By default, prune displays a preview of the results.  To execute the
	operation, you must specify the -y flag.

	'p4 prune' requires 'write' access, which is granted by 'p4 protect'.
	You must also be the owner of the stream in order to run 'p4 prune'.



    labels -- Display list of defined labels

    p4 labels [-t] [-u user] [[-e|-E] nameFilter] [-m max] [file[revrange]]
    p4 labels [-t] [-u user] [[-e|-E] nameFilter] [-m max] [-a|-s serverID]
    p4 labels -U

	Lists labels defined in the server.

	If files are specified, 'p4 labels' lists the labels that contain
	those files.  If you include a file specification, automatic labels
	and labels with the 'autoreload' option set are omitted from the list.
	If the file specification includes a revision range, 'p4 labels'
	lists labels that contain the specified revisions.

	See 'p4 help revisions' for details about specifying revisions.

	The -t flag displays the time as well as the date.

	The -u user flag lists labels owned by the specified user.

	The -e nameFilter flag lists labels with a name that matches
	the nameFilter pattern, for example: -e 'svr-dev-rel*'. The -e flag
	uses the server's normal case-sensitivity rules. The -E flag makes
	the matching case-insensitive, even on a case-sensitive server.

	The -m max flag limits output to the first 'max' number of labels.

	The -U flag lists unloaded labels (see 'p4 help unload').

	The -a and -s flags are useful in a distributed server installation
	(see 'p4 help distributed') in order to see the names of local labels
	stored on other Edge Servers. These flags are not allowed if the
	command includes a file specification.

	The -a flag specifies that all labels should be displayed, not just
	those that are bound to this server.

	The -s serverID flag specifies that only those labels bound to the
	specified serverID should be displayed.

	On an Edge Server, if neither -s nor -a is specified, only those
	local labels bound to this Edge Server are displayed. Labels created
	on the Commit Server are global, and are also included in the output.


    set -- Set or display Perforce variables

    p4 set [-q] [-s -S service] [var[=[value]] ...]

	'p4 set' can set Perforce variables in persistent storage.

	On Windows, 'p4 set' sets Perforce variables in the Windows registry
	to the specified values.  On other platforms, 'p4 set' sets Perforce
	variables in the P4ENVIRO file.

	The 'p4 set' command can be used to set multiple variables in a
	single invocation, as well as to unset variables, or to display the
	current variable value. To display a variable's value, omit the
	'=value' and specify only the variable's name; to unset a variable,
	specify 'var=' but omit the value (as in: 'p4 set P4LOG=')

	With no arguments, 'p4 set' lists all variable settings, and list
	which persistent storage mechanism contained the variable's value.

	The -q flag removes the origins of the settings from the list output.

	The -s flag sets variables for the whole system rather than for the
	user.  This option requires NT administrator privilege.

	The -S service flag sets variables for the specified service. This
	option requires NT administrator privilege.

	Registry/P4ENVIRO variable entries can be overridden by environment
	variables and (in some cases) flags on the command line. See 'p4 help
	environment' for a list of environment variables used by Perforce.

	Certain Perforce variables can also be set persistently by using
	configuration files named by the P4CONFIG variable. These settings
	have higher precedence than environment/registry variables, but lower
	precedence than command line flags. P4CONFIG file variable settings
	only affect Perforce client programs; servers do not use them.

	Since Perforce variables can be set in multiple locations, you should
	examine the output of 'p4 set' carefully; a variable set in one
	location may be overriding a variable set in a lower-precedence
	location.


    reopen -- Change the filetype of an open file or move it to
              another changelist

    p4 reopen [-c changelist#] [-t filetype] file ...

	Reopen an open file for the current user in order to move it to a
	different changelist or change its filetype.

	The target changelist must exist; you cannot create a changelist by
	reopening a file. To move a file to the default changelist, use
	'p4 reopen -c default'.

	If -t filetype is specified, the file is assigned that filetype. If
	a partial filetype is specified, it is combined with the current
	filetype.  For details, see 'p4 help filetypes'.


    tickets -- Display list of session tickets for this user

    p4 tickets

	'p4 tickets' lists all the tickets that have been granted to the
	user by 'p4 login'.


    submit -- Submit open files to the depot

    p4 submit [-Af -r -s -f option --noretransfer 0|1]
    p4 submit [-Af -r -s -f option] file
    p4 submit [-Af -r -f option] -d description
    p4 submit [-Af -r -f option] -d description file
    p4 submit [-Af -r -f option --noretransfer 0|1] -c changelist#
    p4 submit -e shelvedChange#
    p4 submit -i [-Af -r -s -f option]
              --parallel=threads=N[,batch=N][,min=N]

	'p4 submit' commits a pending changelist and its files to the depot.

	By default, 'p4 submit' attempts to submit all files in the 'default'
	changelist.  Submit displays a dialog where you enter a description
	of the change and, optionally, delete files from the list of files
	to be checked in.

	To add files to a changelist before submitting, use any of the
	commands that open client workspace files: 'p4 add', 'p4 edit',
	etc.

	If the file parameter is specified, only files in the default
	changelist that match the pattern are submitted.

	Files in a stream path can be submitted only by client workspaces
	dedicated to the stream. See 'p4 help client'.

	Before committing a changelist, 'p4 submit' locks all the files being
	submitted. If any file cannot be locked or submitted, the files are
	left open in a numbered pending changelist. By default, the files in
	a failed submit operation are left locked unless the
	submit.unlocklocked configurable is set. Files are unlocked even if
	they were manually locked prior to submit if submit fails when
	submit.unlocklocked is set. 'p4 opened' shows unsubmitted files
	and their changelists.

	Submit is atomic: if the operation succeeds, all files are updated
	in the depot. If the submit fails, no depot files are updated.

	If submit fails, some or all of the files may have been copied to
	the server. By default, retrying a failed submit will transfer all of
	the files again unless the submit.noretransfer configurable is set.
	If submit.noretransfer is set to 1, submit uses digest comparisons to
	to detect if the files have already been transferred in order to
	avoid file re-transfer when retrying a failed submit.

	The --noretransfer flag is used to override the submit.noretransfer
	configurable so the user can choose his preferred re-transfer
	behavior during the current submit operation.

	The -Af flag specifies that only files should be submitted with this
	changelist; by default, if the stream spec is open, it will be
	included with the next submit.  (See 'p4 help streamcmds.)

	The -c flag submits the specified pending changelist instead of the
	default changelist. Additional changelists can be created manually,
	using the 'p4 change' command, or automatically as the result of a
	failed attempt to submit the default changelist.

	The -e flag submits a shelved changelist without transferring files
	or modifying the workspace. The shelved change must be owned by
	the person submitting the change, but the client may be different.
	However, files shelved to a stream target may only be submitted by
	a stream client that is mapped to the target stream. In addition,
	files shelved to a non-stream target cannot be submitted by a stream
	client. To submit a shelved change, all files in the shelved change
	must be up to date and resolved. No files may be open in any workspace
	at the same change number. Client submit options (ie revertUnchanged,
	etc) will be ignored. If the submit is successful, the shelved change
	and files are cleaned up, and are no longer available to be unshelved
	or submitted.

	The -d flag passes a description into the specified changelist rather
	than displaying the changelist dialog for manual editing. This option
	is useful for scripting, but does not allow you to add jobs or modify
	the default changelist.

	The -f flag enables you to override submit options that are configured
	for the client that is submitting the changelist.  This flag overrides
	the -r (reopen)flag, if it is specified.  See 'p4 help client' for
	details about submit options.

	The -i flag reads a changelist specification from the standard input.
	The user's editor is not invoked.

	The -r flag reopens submitted files in the default changelist after
	submission.

	The -s flag extends the list of jobs to include the fix status
	for each job, which becomes the job's status when the changelist
	is committed.  See 'p4 help change' for details.

	The --parallel flag specifies options for parallel file transfer. If
	parallel file transfer has been enabled by setting the
	net.parallel.max configurable, and if there are sufficient resources
	across the system, a submit command may execute more rapidly by
	transferring multiple files in parallel. Specify threads=N to request
	files be sent concurrently, using N independent network connections.
	The N threads grab work in batches; specify batch=N to control the
	number of files in a batch. A submit that is too small will not
	initiate parallel file transfers; specify min=N to control the
	minimum number of files in a parallel submit. Requesting progress
	indicators causes the --parallel flag to be ignored.

	Using --parallel from an edge server allows parallel file transfer
	from the edge server to the commit server. This uses standard pull
	threads to transfer the files. Note that an administrator must ensure
	that pull threads can be run on the commit server. The edge server ip
 	address and port number	used by the commit server to connect to the
	edge server must be specified in the ExternalAddress field of the
	edge server spec. Note that parallel submit is not supported from an
	edge server if the commit server is on a Windows platform. In this
	case --parallel	or auto	parallel submit will be silently ignored, and
	the submit will run without using parallel threads.

	Auto parallel submit may be enabled by setting the
	net.parallel.submit.threads configurable to the desired number
	of threads to be used for all submit commands. This value must be
	less than or equal to the value of net.parallel.max. Other
	net.parallel.submit.* configurables may be specified as well, but
	are not required. See 'p4 help configurables' to see the options
	and their defaults. Auto parallel submit is turned off by unsetting
	the net.parallel.submit.threads configurable. A user may override
	the configured auto parallel submit options on the command line,
	or may disable it via 'p4 submit --parallel=0`.

	An edge-content trigger can be used to transfer archive files from
	an Edge to its Commit Server using an alternative file transfer
	mechanism. This option is only used in a distributed environment and
	is not supported for RCS storage. The configurable pull.trigger.dir
	must be set to a location to write temporary files. The configurable
	rpl.submit.nocopy must be set to 1 to suppress default Perforce
	archive file transfer to the Commit Server. The trigger must use
	'fstat -Ob' to get the list of files to transfer, and it must contain
	the file transfer commands.

	Only 'submit -e' is supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph submit' for information on using this command with
	graph depots.


    protects -- Display protections defined for a specified user and path

    p4 protects [-s spec] [-a | -g group | -u user] [-h host] [-m] [file ...]
    p4 protects -M [-g group | -u user] [file ...]

	'p4 protects' displays the lines from the protections table that
	apply to the current user.  The protections table is managed using
	the 'p4 protect' command.

	If the -a flag is specified, protection lines for all users are
	displayed.  If the -g group flag or -u user flag is specified,
	protection lines for that group or user are displayed.

	If the -h host flag is specified, the protection lines that apply
	to the specified host (IP address) are displayed.

	If the -m flag is given, a single word summary of the maximum
	access level is reported. Note that this summary does not take
	exclusions or the specified file path into account.

	If the -M flag is given, a single word summary of the maximum
	access level is reported. Unlike '-m' it does take into account
	exclusions and the specified file path.

	If the -s spec flag is specified and a spec depot has been defined
	then the command runs using the contents of the file in the spec
	depot rather than the current protections table. This allows the
	'super' user back-in-time access to how permission would have
	behaved in a previous version of the protections spec.

	If the file argument is specified, protection lines that apply to
	the specified files are displayed.

	The -a/-g/-u flags require 'super' access granted by 'p4 protect'.


    fix -- Mark jobs as being fixed by the specified changelist

    p4 fix [-d] [-s status] -c changelist# jobName ...

	'p4 fix' marks each named job as being fixed by the changelist
	number specified with -c.  The changelist can be pending or
	submitted and the jobs can be open or closed (fixed by another
	changelist).

	If the changelist has already been submitted and the job is still
	open, then 'p4 fix' marks the job closed.  If the changelist has not
	been submitted and the job is still open, the job is closed when the
	changelist is submitted.  If the job is already closed, it remains
	closed.

	The -d flag deletes the specified fixes.  This operation does not
	otherwise affect the specified changelist or jobs.

	The -s flag uses the specified status instead of the default defined
	in the job specification.

	The fix's status is reported by 'p4 fixes', and is related to the
	job's status. Certain commands set the job's status to the fix's
	status for each job associated with the change. When a job is fixed
	by a submitted change, the job's status is set to match the fix
	status.  When a job is fixed by a pending change, the job's status
	is set to match the fix status when the change is submitted. If the
	fix's status is 'same', the job's status is left unchanged.


    merge -- Merge one set of files into another

    p4 merge [options] [-F] [--from stream] [toFile][revRange]
    p4 merge [options] fromFile[revRange] toFile

	options: -c changelist# -m max -n -Ob -q

	'p4 merge' merges changes from one set of files (the 'source') into
	another (the 'target'). It is a simplified form of the 'p4 integrate'
	command, similar to 'p4 integrate -Rbd -Or'.

	Using the client workspace as a staging area, 'p4 merge' schedules all
	affected target files to be resolved per changes in the source.
	Target files outside of	the current client view are not affected.
	Source files need not be within the client view.

	'p4 resolve' must be used to resolve all changes.  'p4 submit' commits
	merged files to	the depot.  Unresolved files may not be submitted.
	Merged files can be shelved with 'p4 shelve' and abandoned with
	'p4 revert'.  The commands 'p4 integrated' and 'p4 filelog' display
	merge history.

	When 'p4 merge' schedules a workspace file to be resolved, it leaves
	it read-only. 'p4 resolve' can operate on a read-only file;  for
	other pre-submit changes, 'p4 edit' must be used to make the file
	writable.

	By default, 'p4 merge' merges changes into the current stream from its
	parent, or from another stream specified by the --from flag.  The
	source and target can also be specified on the command line as a
	pair of file paths.  More complex merge mappings can be specified
	via branchspecs as with 'p4 integrate' (see 'p4 help integrate').

	Each file in the target is mapped to a file in the source. Mapping
	adjusts automatically for files that have been moved or renamed, as
	long as 'p4 move' was used to move/rename files.  The scope of source
	and target file sets must include both old-named and new-named files
	for mappings to be adjusted.  Moved source files may schedule moves
	to be resolved in target files.

	revRange is a revision or a revision range that limits the span of
	source history to be probed for unintegrated revisions.  For details
	about revision specifiers, see 'p4 help revisions'.

	The -F flag can be used to force merging against a stream's expected
	flow. It can also force the generation of a branch view based on a
	virtual stream; the mapping itself refers to the underlying real
	stream.

	The -Ob flag causes the base revision (if any) to be displayed along
	with each scheduled resolve.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are displayed.

	Merging is not supported for files with propagating attributes
	from an edge server in a distributed environment. Even if the
	merge command succeeds, the required subsequent resolve command
	will fail.

	See 'p4 help-graph merge' for information on using this command with
	graph depots.


    client -- Create or edit a client workspace specification and its view
    workspace -- Synonym for 'client'

    p4 client [-f] [-t template] [-T type] [name]
    p4 client -d [-f [-Fs]] name
    p4 client -o [-t template] [-T type] [name]
    p4 client -S stream [[-c change] -o] [name]
    p4 client -s [-f] -S stream [name]
    p4 client -s [-f] -t template [name]
    p4 client -i [-f]
    p4 client -d -f --serverid=X [-Fs] name

	Creates a new client specification ('spec') or edits an existing
	spec.  A client spec is a named mapping of depot files to workspace
	files.

	The 'p4 client' command puts the client spec into a temporary file
	and invokes the editor configured by the environment variable
	$P4EDITOR.  For new workspaces, the client name defaults to the
	$P4CLIENT environment variable, if set, or to the current host name.
	Saving the file creates or modifies the client spec.

	The client spec contains the following fields:

	Client:      The client name.

	Host:        If set, restricts access to the named host.
		     If unset, access is allowed from any host.

	Owner:       The user who created this client.

	Update:      The date that this spec was last modified.

	Access:      The date that this client was last used in any way.

	Description: A short description of the workspace.

	Root:        The root directory of the workspace (specified in local
		     file system syntax), under which all versioned files
		     will be placed. If you change this setting, you must
		     physically relocate any files that currently reside
		     there.  On Windows client machines, you can specify the
		     root as "null" to enable you to map files to multiple
		     drives.

	AltRoots:    Up to two optional alternate client workspace roots.
		     The first of the main and alternate roots to match the
		     client program's current working directory is used. If
		     none match, the main root is used. 'p4 info' displays
		     the root that is being used.

	Options:     Flags to configure the client behavior. Defaults
		     are marked with *.

		allwrite	Leaves all files writable on the client;
		noallwrite *	by default, only files opened by 'p4 edit'
				are writable. If set, files might be clobbered
				as a result of ignoring the clobber option
				(see below).

		clobber		Permits 'p4 sync' to overwrite writable
		noclobber *	files on the client.  noclobber is ignored if
				allwrite is set.

		compress 	Compresses data sent between the client
		nocompress *	and server to speed up slow connections.

		locked   	Allows only the client owner to use or change
		unlocked *	the client spec.  Prevents the client spec from
				being deleted or unloaded.

		modtime  	Causes 'p4 sync' and 'p4 submit' to preserve
		nomodtime *	file modification time, as with files with the
				+m type modifier. (See 'p4 help filetypes'.)
				With nomodtime, file timestamps are updated by
				sync and submit operations.

		rmdir		Makes 'p4 sync' attempt to delete a workspace
		normdir *	directory when all files in it are removed.

	SubmitOptions:  Flags to change submit behavior.

		submitunchanged     All open files are submitted (default).

		revertunchanged     Files that have content, type, or resolved
		                    changes are submitted. Unchanged files are
		                    reverted.

		leaveunchanged      Files that have content, type, or resolved
		                    changes are submitted. Unchanged files are
		                    moved to the default changelist.

		        +reopen     Can be appended to the submit option flag
		                    to cause submitted files to be reopened in
		                    the default changelist.
		                    Example: submitunchanged+reopen

	LineEnd:    Set line-ending character(s) for client text files.

		local		mode that is native to the client (default).
		unix		linefeed: UNIX style.
		mac		carriage return: Macintosh style.
		win		carriage return-linefeed: Windows style.
		share		hybrid: writes UNIX style but reads UNIX,
				Mac or Windows style.

	View:        Maps files in the depot to files in your client
		     workspace.  Defines the files that you want in your
		     client workspace and specifies where you want them
		     to reside.  The default view maps all depot files
		     onto the client.  See 'p4 help views' for view syntax.
		     A new view takes effect on the next 'p4 sync'.

	ChangeView:  Restricts depot paths to a particular point in time.
	             Example: //depot/path/...@1000
	             Revisions submitted to the path after the specified
	             changelist will not be visible.  Files matching a
	             ChangeView path may not be submitted.

	             Automatic labels may also used to specify a particular
	             point in time: the label's 'Revision' field must be set
	             to a changelist number or a date.  If the label has a
	             view, only files that match the intersection of the
	             ChangeViewpath and the label's view will be restricted to
	             the point in time specified by the 'Revision' field; any
	             other files matching the ChangeView path may sync to
	             #head, but cannot be submitted.

	Stream:      The stream to which this client's view will be dedicated.
		     (Files in stream paths can be submitted only by dedicated
		     stream clients.) When this optional field is set, the
		     View field will be automatically replaced by a stream
		     view as the client spec is saved.

	StreamAtChange:
		     Stream meta-data (for view creation) is versioned.
		     When StreamAtChange is set, the stream hierarchy is
		     constructed back-in-time to reproduce the view that was
		     available to clients in the past. With this field set
		     changes cannot be be submitted from the client.
		     StreamAtChange is optional; Stream must be set as well.

	ServerID:    If set, restricts usage to the named server.
		     If unset, usage is allowed on the master server and on
		     any replicas of the master other than Edge Servers.

	Type:        By default all clients are 'writeable', certain clients
		     are short lived and perform long sync and build cycles.
		     Over time these build clients can fragment the 'db.have'
		     table which is used to track what files a client has
		     synced.  Setting a type of 'readonly' gives the client
		     its own personal 'db.have' database table.  A 'readonly'
		     client cannot 'edit' or 'submit' files, however for build
		     automation this is not usually a requirement and the
		     performance tradeoff is worth considering if your build
		     automation is causing issues with the 'db.have' table.
		     This option requires that an administrator has first
		     configured the 'client.readonly.dir' setting.  If it is
		     necessary to submit changes as part of your build,
		     you may specify a 'partitioned' client: like a 'readonly'
		     client, this type also has a separate 'db.have' table
		     under the 'client.readonly.dir' directory, but allows
		     journalled 'edit' and 'submit' of files.

	Note: changing the client root does not actually move the client
	files; you must relocate them manually.  Similarly, changing
	the 'LineEnd' option does not actually update the client files;
	you can refresh them with 'p4 sync -f'.

	The -d flag deletes the specified spec, as long as the client
	workspace has no opened files or pending changes.  (See 'p4 help
	opened'.) The -f flag forces the delete. The -Fs option used with -f
	forces client deletion even when the user has shelved changes. In
	this case, the shelved changes are left intact.

	The -o flag writes the named client spec to the standard output.
	The user's editor is not invoked.

	The -i flag reads a client spec from the standard input.  The
	user's editor is not invoked.

	The -t template flag, where 'template' is the name of another client
	spec, causes the View and Options fields to be replaced by those of
	the template.

	The -T type flag lets you set the type of client, this can only be
	set when first creating the client. For classic Perforce clients the
	default is 'writeable', set this value to 'readonly' for build
	automation or clients that do not need to update content.

	The -f flag can force the updating of locked clients; normally
	locked clients can only be modified by their owner.  -f also allows
	the last modified date to be set.  The -f flag requires 'admin'
	access granted by 'p4 protect'.

	The -s flag is used to switch an existing client spec's view without
	invoking the editor.  It can be used with -S to switch to a stream
	view, or with -t to switch to a view defined in another client spec.
	Switching views is not allowed in a client that has opened files.
	The -f flag can be used with -s to force switching with opened files.
	View switching has no effect on files in a client workspace until
	'p4 sync' is run.

	Without -s, the '-S stream' flag can be used to create a new client
	spec dedicated to a stream. If the client spec already exists, and
	-S is used without -s, an error occurs when the client is bound to
	a different, or no stream.  Using -S sets the new client's
	Stream field.  The special syntax '-S //a/stream@changelist' can
	be used to set both Stream and StreamAtChange at the same time.

	The '-S stream' flag can be used with '-o -c change' to inspect an
	old stream client view. It yields the client spec that would have
	been created for the stream at the moment the change was recorded.

	A server of type 'build-server' (see 'p4 help server') is a replica
	which supports build farm integration, and the 'p4 client' command
	may be used to create or edit client workspaces on a build-server.
	Such workspaces may issue the 'p4 sync' command, in addition to any
	read-only command supported by the replica. For more information, run
	'p4 help buildserver'.

	When creating or editing a client workspace for a build-server,
	the client specified by the optional 'name' argument, as well as the
	client specified by the $P4CLIENT environment variable or via the
	global '-c client' argument must not exist, or must be restricted
	to this server; this command may not be used to create or edit a
	workspace that is not restricted to this build-server.

	In order to delete a workspace which is bound to a different server,
	specify 'client -d -f --serverid=X', providing the serverid of the
	owning server. This variant of the client command must be issued
	directly to the Commit Server.

	See 'p4 help-graph client' for information on using this command with
	graph depots.


    annotate -- Print file lines and their revisions

    p4 annotate [-aciIqtTu -d<flags>] file[revRange] ...

	Prints all lines of the specified files, indicating the revision that
	introduced each line into the file.

	If the file argument includes a revision, then only revisions up to
	the specified revision are displayed.  If the file argument has a
	revision range, only revisions within that range are displayed. For
	details about specifying revisions, see 'p4 help revisions'.

	The -a flag includes both deleted files and lines no longer present
	at the head revision. In the latter case, both the starting and ending
	revision for each line is displayed.

	The -c flag directs the annotate command to output changelist numbers
	rather than revision numbers for each line.

	The -d<flags> change the way whitespace and/or line endings are
	treated: -db (ignore whitespace changes), -dw (ignore whitespace),
	-dl (ignore line endings).

	The -i flag follows branches.  If a file was created by branching,
	'p4 annotate' includes the revisions of the source file up to the
	branch point, just as 'p4 filelog -i' does.  If a file has history
	prior to being created by branching (such as a file that was branched
	on top of a deleted file), -i ignores those prior revisions and
	follows the source.  -i implies -c.

	The -I flag follows all integrations into the file.  If a line was
	introduced into the file by a merge, the source of the merge is
	displayed as the changelist that introduced the line. If the source
	itself was the result of an integration, that source is used instead,
	and so on.  -I implies -c and may not be combined with -i.

	The -q flag suppresses the one-line header that is displayed by
	default for each file.

	The -t flag forces 'p4 annotate' to display binary files.

	The -T flag aligns output to a tab stop of 8.  A different tab stop
	may be specified via '--tab=N'.

	The -u flag directs the annotate command to output the user who
	modified the line in the file and the date it was modified.


    review -- List and track changelists (for the review daemon)

    p4 review [-c changelist#] [-t counter]

	'p4 review' lists changelists that have not been reviewed before,
	as tracked by the specified counter.  If the counter is omitted,
	'p4 review' lists all changelists.  (If a changelist# and counter
	are specified, 'p4 review' sets the counter to that changelist# and
	produces no output.  This functionality has been superceded by the
	'p4 counter' command.)

	'p4 review' is not meant as an end-user command.  It exists to
	support an automated change review daemon.


    logger -- Report changed jobs and changelists

    p4 logger [-c sequence#] [-t counter]

	Dumps the event log, which notes updates to changes and jobs, for
	use with defect tracking integration.  The event log is enabled
	by setting the counter 'logger' to 0 using the 'p4 counter' command.
	Each event is assigned a sequence number.  The presence of an entry
	in the log doesn't guarantee that the named entity has changed.

	If a sequence# is specified using the -c flag, only events after that
	number are listed. If a counter is given using the -t flag, only events
	after the number of that counter are listed.  If both are specified,
	the counter is updated to the sequence number and nothing is output.
	If the update brings the counter to the highest sequence number in
	the log, the log is cleared.

	Important: 'p4 logger' is not intended for end users. It is used by
	P4DTG to help propagate information to an external defect tracking
	system.

	'p4 logger -c' requires 'review' access, which is granted by 'p4
	protect'.

	In a distributed installation, 'p4 logger' commands should be issued
	to the Commit Server, not to an Edge Server.


    reconcile -- Open files for add, delete, and/or edit to reconcile
                 client with workspace changes made outside of Perforce

    rec         -- synonym for 'reconcile'
    status      -- 'reconcile -n + opened' (output uses local paths)
    status -A   -- synonym for 'reconcile -ead' (output uses local paths)

    clean       -- synonym for 'reconcile -w'

    p4 reconcile [-c change#] [-e -a -d -f -I -l -m -n -w] [file ...]
    p4 status [-c change#] [-A | [-e -a -d] | [-s]] [-f -I -m] [file ...]
    p4 clean [-e -a -d -I -l -n] [file ...]
    p4 reconcile -k [-l -n] [file ...]
    p4 status -k [file ...]

	'p4 reconcile' finds unopened files in a client's workspace and
	detects the following:

	1. files in depot missing from workspace, but still on have list
	2. files on workspace that are not in depot
	3. files modified in workspace that are not opened for edit

	By default, the files matching each condition above in the path
	are reconciled by opening files for delete (scenario 1), add
	(scenario 2), and/or edit (scenario 3). The -e, -a, and -d flags
	may be used to limit to a subset of these operations. If no file
	arguments are given, reconcile and status default to the current
	working directory.

	If the list of files to be opened includes both adds and deletes,
	the missing and added files will be compared and converted to pairs
	of move/delete and move/add operations if they are similar enough.

	In addition to opening unopened files, reconcile will detect files
	that are currently opened for edit but missing from the workspace
	and reopen them for delete. Reconcile will also detect files opened
	for delete that are present on the workspace and reopen them for
	edit.

	The -n flag previews the operation without performing any action.
	Although metadata updates from reconcile require open permission,
	the preview commands only require read access.

	If -c changelist# is included, the files are opened in the specified
	pending changelist.

	The -e flag allows the user to reconcile files that have been
	modified outside of Perforce. The reconcile command will open
	these files for edit.

	The -a flag allows the user to reconcile files that are in the
	user's directory that are not under Perforce source control. These
	files are opened for add.

	The -f flag allows the user to add files with filenames that contain
	wildcard characters. Filenames that contain the special characters
	'@', '#', '%' or '*' are reformatted to encode the characters using
	ASCII hexadecimal representation.  After the files are added, you
	must refer to them using the reformatted file name, because Perforce
	does not recognize the local filesystem name.

	The -I flag informs the client that it should not perform any ignore
	checking configured by P4IGNORE.

	The -d flag allows the user to reconcile files that have been
	removed from the user's directory but are still in the depot.
	These files will be opened for delete only if they are still on the
	user's have list.

	The -l flag requests output in local file syntax using relative
	paths, similar to the workspace-centric view provided by 'status'.

	The -m flag used in conjunction with -e can be used to minimize
	costly digest computation on the client by checking file modification
	times before checking digests to determine if files have been
	modified outside of Perforce.

	The -w flag forces the workspace files to be updated to match the
	depot rather than opening them so that the depot can be updated to
	match the workspace.  Files that are not under source control will
	be deleted, and modified or deleted files will be refreshed.  Note
	that this operation will result in the loss of any changes made to
	unopened files. This option requires read permission.

	The -k flag updates the have list when files in the workspace but
	not on the have list match content of corresponding files in the
	depot. In this case, the client's have list is updated to reflect
	the matching revisions. This option is used to reconcile the have
	list with the workspace.

	The -s flag (only used with 'p4 status') requests summarized
	output for the files to be opened for 'add'. Files in the current
	directory are listed as usual, but subdirectories containing files
	to be opened for 'add' are displayed instead of each file. This
	optimized option doesn't support move detection. Files to open
	for 'delete' and 'edit' are still listed individually.

	The status command displays preview output which includes files
	which are already opened in addition to the files that need to
	be reconciled. Opened files are not shown with options -A/-a/-e/-d.

	'p4 reconcile' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph reconcile' for information on using this command
	with graph depots.


    reviews -- List the users who are subscribed to review files

    p4 reviews [-C client] [-c changelist#] [file ...]

	'p4 reviews' lists all users who have subscribed to review the
	specified files.

	The -c flag limits the files to the submitted changelist.

	The -C flag limits the files to those opened in the specified clients
	workspace,  when used with the -c flag limits the workspace to files
	opened in the specified changelist.

	To subscribe to review files, issue the 'p4 user' command and edit
	the 'Reviews field'.


    clients -- Display list of clients
    workspaces -- synonym for 'clients'

    p4 clients [-t] [-u user] [[-e|-E] nameFilter] [-m max] [-S stream]
               [-a|-s serverID]
    p4 clients -U

	Lists all client workspaces currently defined in the server.

	The -t flag displays the time as well as the date.

	The -u user flag lists client workspaces that are owned by the
	specified user.

	The -e nameFilter flag lists workspaces with a name that matches
	the nameFilter pattern, for example: -e 'svr-dev-rel*'. The -e flag
	uses the server's normal case-sensitivity rules. The -E flag makes
	the matching case-insensitive, even on a case-sensitive server.

	The -m max flag limits output to the specified number of workspaces.

	The -S stream flag limits output to the client workspaces dedicated
	to the stream.

	The -U flag lists unloaded clients (see 'p4 help unload').

	The -a flag specifies that all clients should be displayed, not just
	those that are bound to this server.

	The -s serverID flag specifies that only those clients bound to the
	specified serverID should be displayed. On an Edge Server, the -s
	flag defaults to the Edge Server's serverID.



    fstat -- Dump file info

    p4 fstat [-F filter -L -T fields -m max -r] [-c | -e changelist#]
	[-Ox -Rx -Sx] [-A pattern] [-U] file[rev] ...

	fstat lists information about files, one line per field.  Fstat is
	intended for use in Perforce API applications, where the output can
	be accessed as variables, but its output is also suitable for parsing
	from the client command output in scripts.

	The fields that fstat displays are:

		attr-<name>          -- attribute value for <name>
		attrProp-<name>      -- set if attribute <name> is propagating
		clientFile           -- local path (host or Perforce syntax)
		depotFile            -- name in depot
		movedFile            -- name in depot of moved to/from file
		path                 -- local path (host syntax)
		isMapped             -- set if file is mapped in the client
		shelved              -- set if file is shelved
		headAction           -- action at head rev, if in depot
		headChange           -- head rev changelist#, if in depot
		headRev              -- head rev #, if in depot
		headType             -- head rev type, if in depot
		headCharset          -- head charset, for unicode type
		headTime             -- head rev changelist time, if in depot
		headModTime	     -- head rev mod time, if in depot
		movedRev             -- head rev # of moved file
		haveRev              -- rev had on client, if on client
		desc                 -- change description (if -e specified)
		digest               -- MD5 digest (fingerprint)
		fileSize             -- file size
		otherOpen            -- set if someone else has it open
		otherOpen#           -- list of user@client with file opened
		otherLock            -- set if someone else has it locked
		otherLock#           -- user@client with file locked
		otherAction#         -- open action, if opened by someone else
		otherChange#         -- changelist, if opened by someone else
		openattr-<name>      -- attribute value for <name>
		openattrProp-<name>  -- set if attribute <name> is propagating
		totalFileCount       -- total no. of files, if sorted

	If the file is opened in the current workspace, additional fields
	that fstat displays are:

		action               -- open action, if opened
		actionOwner          -- user who opened file, if opened
		change               -- open changelist#, if opened
		charset              -- open charset, for unicode type
		ourLock              -- set if this user/client has it locked
		revtime              -- file modification time, if shelved
		type                 -- open type, if opened
		workRev              -- open revision, if opened

	If the opened file involves pending integrations, additional fields
	that fstat displays are:

		resolved             -- resolved integration records
		unresolved           -- unresolved integration records
		reresolvable         -- reresolvable integration records
		resolveAction#       -- pending integration record action
		resolveType#         -- pending integration type
		resolveBaseFile#     -- pending integration base file
		resolveBaseRev#      -- pending integration base rev
		resolveFromFile#     -- pending integration from file
		resolveStartFromRev# -- pending integration from start rev
		resolveEndFromRev#   -- pending integration from end rev

	The -A <pattern> flag restricts displayed attributes to those that
	match 'pattern'.

	The -F flag lists only files satisfying the filter expression. This
	filter syntax is similar to the one used for 'jobs -e jobview' and is
	used to evaluate the contents of the fields in the preceding list.
	Filtering is case-sensitive.

	        Example: -Ol -F "fileSize > 1000000 & headType=text"

	Note: filtering is not optimized with indexes for performance.

	The -L flag can be used with multiple file arguments that are in
	full depot syntax and include a valid revision number. When this
	flag is used the arguments are processed together by building an
	internal table similar to a label. This file list processing is
	significantly faster than having to call the internal query engine
	for each individual file argument. However, the file argument syntax
	is strict and the command will not run if an error is encountered.

	The -T fields flag returns only the specified fields. The field names
	can be specified using a comma- or space-delimited list.

	        Example: -Ol -T "depotFile, fileSize"

	The -m max flag limits output to the specified number of files.

	The -r flag sorts the output in reverse order.

	The -c changelist# flag displays files modified by the specified
	changelist or after that changelist was submitted.  This operation is
	much faster than using a revision range on the affected files.

	The -e changelist# flag lists files modified by the specified
	changelist. When used with the -Ro flag, only pending changes are
	considered, to ensure that files opened for add are included. This
	option also displays the change description.

	The -O options modify the output as follows:

	        -Oa     output attributes set by 'p4 attribute'.

		-Ob	output the path, revision, type, full and relative
			local paths of the server archive file. Requires
			'admin' privilege.

	        -Od     output the digest of the attribute.

	        -Oe     output attribute values encoded as hex

	        -Of     output all revisions for the given files (this
	                option suppresses other* and resolve* fields)

	        -Ol     output a fileSize and digest field for each revision
	                (this may be expensive to compute)

	        -Op     output the local file path in both Perforce syntax
	                (//client/) as 'clientFile' and host form as 'path'

	        -Or     output pending integration record information for
	                files opened on the current client, or if used with
	                '-e <change> -Rs', on the shelved change

	        -Os     exclude client-related data from output

	The -R option limits output to specific files:

	        -Rc     files mapped in the client view
	        -Rh     files synced to the client workspace
	        -Rn     files opened not at the head revision
	        -Ro     files opened
	        -Rr     files opened that have been resolved
	        -Rs     files shelved (requires -e)
	        -Ru     files opened that need resolving

	The -S option changes the order of output:

	        -St     sort by filetype
	        -Sd     sort by date
	        -Sr     sort by head revision
	        -Sh     sort by have revision
	        -Ss     sort by filesize

	The -U flag displays information about unload files in the unload
	depot (see 'p4 help unload').

	For compatibility, the following flags are also supported:
	-C (-Rc) -H (-Rh) -W (-Ro) -P (-Op) -l (-Ol) -s (-Os).

	See 'p4 help-graph fstat' for information on using this command with
	graph depots.


    fixes -- List jobs with fixes and the changelists that fix them

    p4 fixes [-i -m max -c changelist# -j jobName] [file[revRange] ...]

	'p4 fixes' list fixed jobs and the number of the changelist that
	 contains the fix. Fixes are associated with changelists using the
	'p4 fix' command or by editing and submitting changelists.

	The 'p4 fixes' command lists both submitted and pending changelists.

	By default, 'p4 fixes' lists all fixes.  This list can be limited
	as follows: to list fixes for a specified job, use the -j jobName
	flag.  To list fixes for a specified changelist, use -c changelist#.
	To list fixes that affect specified files, include the file argument.
	The file pattern can include wildcards and revision specifiers. For
	details about revision specifiers, see 'p4 help revisions'

	The -i flag also includes any fixes made by changelists integrated
	into the specified files.

	The -m max flag limits output to the specified number of job
	fixes.


    have -- List the revisions most recently synced to the current workspace

    p4 have [file ...]

	List revision numbers of the currently-synced files. If file name is
	omitted, list all files synced to this client workspace.

	The format is:  depot-file#revision - client-file

	See 'p4 help-graph have' for information on using this command with
	graph depots.


    copy -- Copy one set of files to another

    p4 copy [options] fromFile[rev] toFile
    p4 copy [options] -b branch [-r] [toFile[rev] ...]
    p4 copy [options] -b branch -s fromFile[rev] [toFile ...]
    p4 copy [options] -S stream [-P parent] [-F] [-r] [toFile[rev] ...]

	options: -c changelist# -f -n -v -m max -q

	'p4 copy' copies one set of files (the 'source') into another (the
	'target').

	Using the client workspace as a staging area, 'p4 copy' makes the
	target identical to the source by branching, replacing, or deleting
	files.  'p4 submit' submits copied files to the depot. 'p4 revert'
	can be used to revert copied files instead of submitting them.  The
	history of copied files can be shown with 'p4 filelog' or 'p4
	integrated'.

	Target files that are already identical to the source, or that are
	outside of the client view, are not affected by 'p4 copy'. Opened,
	non-identical target files cause 'p4 copy' to exit with a warning.
	When 'p4 copy' creates or modifies files in the workspace, it leaves
	them read-only; 'p4 edit' can make them writable.  Files opened by
	'p4 copy' do not need to be resolved.

	Source and target files (fromFile and toFile) can be specified on
	the 'p4 copy' command line or through a branch view. On the command
	line, fromFile is the source file set and toFile is the target file
	set.  With a branch view, one or more toFile arguments can be given
	to limit the scope of the target file set.

	A revision specifier can be used to select the revision to copy; by
	default, the head revision is copied. The revision specifier can be
	used on fromFile, or on toFile, but not on both.  When used on toFile,
	it refers to source revisions, not to target revisions.  A range may
	not be used as a revision specifier.  For revision syntax, see 'p4
	help revisions'.

	The -S flag makes 'p4 copy' copy from a stream to its parent.
	Use -r with -S to reverse the copy direction.  Note that to submit
	copied stream files, the current client must be switched to the
	target stream, or to a virtual child stream of the target stream.
	The -S flag causes 'p4 copy' to use a generated branch view that
	maps the stream to its parent.  -P can be used to generate the
	branch view using a parent stream other than the stream's actual
	parent.  The -S flag also makes 'p4 copy' respect a stream's flow.

	The -F flag can be used with -S to force copying against a stream's
	expected flow. It can also force -S to generate a branch view based
	on a virtual stream; the mapping itself refers to the underlying
	real stream.

	The -b flag makes 'p4 copy' use a user-defined branch view.  (See
	'p4 help branch'.) The source is the left side of the branch view
	and the target is the right side. With -r, the direction is reversed.

	The -s flag can be used with -b to cause fromFile to be treated as
	the source, and both sides of the user-defined branch view to be
	treated as the target, per the branch view mapping.  Optional toFile
	arguments may be given to further restrict the scope of the target
	file set. -r is ignored when -s is used.

	The -c changelist# flag opens files in the designated (numbered)
	pending changelist instead of the default changelist.

	The -f flag forces the creation of extra revisions in order to
	explicitly record that files have been copied.  Deleted source files
	will be copied if they do not exist in the target, and files that are
	already identical will be copied if they are not connected by existing
	integration records.

	The -n flag displays a preview of the copy, without actually doing
	anything.

	The -m flag limits the actions to the first 'max' number of files.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are displayed.

	The -v flag causes a 'virtual' copy that does not modify client
	workspace files.  After submitting a virtual integration, 'p4 sync'
	can be used to update the workspace.

	'p4 copy' is not supported for files with propagating attributes
	from an edge server in a distributed environment.


    resolved -- Show files that have been resolved but not submitted

    p4 resolved [-o] [file ...]

	'p4 resolved' lists file updates and integrations that have been
	resolved but not yet submitted.  To see unresolved integrations,
	use 'p4 resolve -n'.  To see already submitted integrations, use
	'p4 integrated'.

	If a depot file path is specified, the output lists resolves for
	'theirs' files that match the specified path.  If a client file
	path is specified, the output lists resolves for 'yours' files
	that match the specified path.

	The -o flag reports the revision used as the base during the
	resolve.


    labelsync -- Apply the label to the contents of the client workspace

    p4 labelsync [-a -d -g -n -q] -l label [file[revRange] ...]

	Labelsync causes the specified label to reflect the current contents
	of the client.  It records the revision of each file currently synced.
	The label's name can subsequently be used in a revision specification
	as @label to refer to the revision of a file as stored in the label.

	Without a file argument, labelsync causes the label to reflect the
	contents of the whole client, by adding, deleting, and updating the
	label.  If a file is specified, labelsync updates the specified file.

	If the file argument includes a revision specification, that revision
	is used instead of the revision synced by the client. If the specified
	revision is a deleted revision, the label includes that deleted
	revision.  See 'p4 help revisions' for details about specifying
	revisions.

	If the file argument includes a revision range specification,
	only files selected by the revision range are updated, and the
	highest revision in the range is used.

	The -a flag adds the specified file to the label.

	The -d deletes the specified file from the label, regardless of
	revision.

	The -n flag previews the operation without altering the label.

	Only the owner of a label can run labelsync on that label. A label
	that has its Options: field set to 'locked' cannot be updated. A
	label without an owner can be labelsync'd by any user.

	The -q flag suppresses normal output messages. Messages regarding
	errors or exceptional conditions are displayed.

	The -g flag should be used on an Edge Server to update a global
	label. Note that in this case, the client should be a global client.
	Configuring rpl.labels.global=1 reverses this default and causes this
	flag to have the opposite meaning.


     key -- Display, set, or delete a key/value pair

     p4 key name
     p4 key [-v] name value
     p4 key [-d] name
     p4 key [-i -v] name
     p4 key -m [ pair list ]
     p4 key --from=oldValue --to=newValue name

	The first form displays the value of the specified key.

	The second form sets the key to the specified value.

	The third form deletes the key.

	The -i flag increments a keys value by 1 and returns the new value.
	This option is used instead of a value argument and can only be
	used with numeric key values.

	The -v flag displays the previous value of the specified key
	after the key has been set or incremented.

	The -m flag in the fifth form allows multiple operations in one
	command. With this form, the list is pairs of arguments.  Each pair
	is either key value or '-' key.  To set a key use a key
	and value. To delete a key use a '-' followed by the key.

	The sixth form sets a key to the newValue only if the current
	value of the key is oldValue. Note that a key that has never
	been set (or has been deleted) cannot be set using this form.

	'p4 key' requires 'review' access granted by 'p4 protect'.


    passwd -- Set the user's password on the server (and Windows client)

    p4 passwd [-O oldPassword -P newPassword] [user]

	'p4 passwd' sets the user's password on the server.

	After a password is set for a user, the same password must be set on
	the client in the environment variable $P4PASSWD to enable the user
	to use all Perforce client applications on that machine. (On Windows,
	you can use 'p4 passwd' to configure the password in the environment.)

	'p4 passwd' prompts for both the old password and the new password
	with character echoing turned off.  To delete the password, set it to
	an empty string.

	The -O flag provides the old password, avoiding prompting. If you
	specify -O, you must also specify -P.

	The -P flag provides the new password, avoiding prompting.

	If you are using ticket-based authentication, changing your password
	automatically invalidates all of your tickets and logs you out.

	Specifying a username as an argument to 'p4 passwd' requires 'super'
	access granted by 'p4 protect'.


    lock -- Lock an open file to prevent it from being submitted

    p4 lock [-c changelist#] [-g] [file ...]

	The specified files are locked in the depot, preventing any user
	other than the current user on the current client from submitting
	changes to the files.  If a file is already locked, the lock request
	is rejected.

	The -c flag and the file specification limit the files to be locked.
	If no file names are specified and no changelist is specified, all
	open files are locked.

	The -g flag is used to lock the files locally and globally at the
	Commit Server in a distributed environment. It may only be run from
	an Edge Server. When used to pre-lock files prior to submit, files
	should be opened in a numbered change in order to improve submit
	performance. These locks are removed by the 'unlock', 'revert',
	or any 'submit' command that operates on these files. Note that
	global locks will not be taken if any of the opened files specified
	in the command could not be opened locally.

	If a changelist is specified, only those files open in that
	changelist are locked.

	If a file specification is given, only the matching files are locked.

	If both the -c flag and a file specification are provided, only the
	matching files in the specified changelist are locked.

	See 'p4 help-graph lock' for information on using this command with
	graph depots.


    shelve -- Store files from a pending changelist into the depot

    p4 shelve [-Af] [-p] [files]
    p4 shelve [-Af] [-a option] [-p] -i [-f | -r]
    p4 shelve [-Af] [-a option] [-p] -r -c changelist#
    p4 shelve [-Af] [-a option] [-p] -c changelist# [-f] [file ...]
    p4 shelve [-As] -d -c changelist# [-f] [file ...]
              --parallel=threads=N[,batch=N][,min=N]

	'p4 shelve' creates, modifies or deletes shelved files in a pending
	changelist. Shelved files remain in the depot until they are deleted
	(using 'p4 shelve -d') or replaced by subsequent shelve commands.
	After 'p4 shelve', the user can revert the files and restore them
	later using 'p4 unshelve'.  Other users can 'p4 unshelve' the stored
	files into their own workspaces.

	Files that have been shelved can be accessed by the 'p4 diff',
	'p4 diff2', 'p4 files' and 'p4 print' commands using the revision
	specification '@=change', where 'change' is the pending changelist
	number.

	By default, 'p4 shelve' creates a changelist, adds files from the
	user's default changelist, then shelves those files in the depot.
	The user is presented with a text changelist form displayed using
	the editor configured using the $P4EDITOR environment variable.

	If a file pattern is specified, 'p4 shelve' shelves the files that
	match the pattern.

	The -Af flag specifies that only files should be shelved with this
	changelist; by default, if the stream spec is open, it will also be
	included with any shelved changelist.  (See 'p4 help streamcmds.)

	The -i flag reads the pending changelist specification with shelved
	files from the standard input.  The user's editor is not invoked.
	To modify an existing changelist with shelved files, specify the
	changelist number using the -c flag.

	The -c flag specifies the pending changelist that contains shelved
	files to be created, deleted, or modified. Only the user and client
	of the pending changelist can add or modify its shelved files. Any
	files specified by the file pattern must already be opened in the
	specified changelist; use 'p4 reopen' to move an opened file from
	one changelist to another.

	The -f (force) flag must be used with the -c or -i flag to overwrite
	any existing shelved files in a pending changelist.

	The -r flag (used with -c or -i) enables you to replace all shelved
	files in that changelist with the files opened in your own workspace
	at that changelist number.  Previously shelved files will be deleted.
	Only the user and client workspace of the pending changelist can
	replace its shelved files.

	The -a flag enables you to handle unchanged files similarly to some
	client submit options, namely 'submitunchanged' and 'leaveunchanged'.
	The default behavior of shelving all files corresponds to the
	'submitunchanged' option. The 'leaveunchanged' option only shelves
	changed files, and then leaves the files opened in the pending
	changelist on the client.

	The -d flag (used with -c) deletes the shelved files in the specified
	changelist so that they can no longer be unshelved.  By default, only
	the user and client of the pending changelist can delete its shelved
	files. A user with 'admin' access can delete shelved files by including
	the -f flag to force the operation.

	If the shelved changelist includes a stream spec, by default it is
	deleted when all files have been deleted; the -As flag forces the
	the stream spec to be deleted even if files remain.

	The -p flag promotes a shelved change from an edge server to a commit
	server where it can be accessed by other edge servers participating
	in the distributed configuration.  Once a shelved change has been
	promoted, all subsequent local modifications to the shelf are also
	pushed to the commit server and remain until the shelf is deleted.
	Once a shelf has been created, the combination of flags '-p -c' will
	promote the shelf without modification unless '-f' or '-r' are also
	used to update the shelved files before promotion.

	The --parallel flag specifies options for parallel file transfer. If
	parallel file transfer has been enabled by setting the
	net.parallel.max configurable, and if there are sufficient resources
	across the system, a shelve command may execute more rapidly by
	transferring multiple files in parallel. Specify threads=N to request
	files be sent concurrently, using N independent network connections.
	The N threads grab work in batches: specify batch=N to control the
	number of files in a batch. A shelve that is too small will not
	initiate parallel file transfers: specify min=N to control the
	minimum number of files in a parallel shelve. Promoted shelves
	require an additional file transfer from the Edge to Commit Server.
	Parallel pull threads for this transfer are only used if the
	ExternalAddress field is set in its Edge Server spec and pull threads
	can be used on the Commit Server. This transfer using pull threads
	is currently not supported on Windows platforms.

	Auto parallel shelve may be enabled by setting the
	net.parallel.shelve.threads configurable to the desired number
	of threads to be used for all shelve commands. This value must be
	less than or equal to the value of net.parallel.max. Other
	net.parallel.shelve.* configurables may be specified as well, but
	are not required. See 'p4 help configurables' to see the options
	and their defaults. Auto parallel shelve is turned off by unsetting
	the net.parallel.shelve.threads configurable. A user may override
	the configured auto parallel shelve options on the command line,
	or may disable it via 'p4 shelve --parallel=0`.

	'p4 shelve' is not supported for files with propagating attributes
	from an edge server in a distributed environment.


    grep -- Print lines matching a pattern

    p4 grep [options] -e pattern file[revRange]...

	options: -a -i -n -A <num> -B <num> -C <num> -t -s (-v|-l|-L) (-F|-G)

	Searches files for lines that match the specified regular expression,
	which can contain wildcards.  The parser used by the Perforce server
	is based on V8 regexp and might not be compatible with later parsers,
	but the majority of functionality is available.

	By default the head revision is searched.  If the file argument
	includes a revision specification, all corresponding revisions are
	searched.  If the file argument includes a revision range, only files
	in that range are listed, and the highest revision in the range is
	searched.  For details about revision specifiers, see
	'p4 help revisions'.

	The -a flag searches all revisions within the specified range. By
	default only the highest revision in the range is searched.

	The -i flag causes the pattern matching to be case-insensitive. By
	default, matching is case-sensitive.

	The -n flag displays the matching line number after the file revision
	number. By default, matches are displayed as revision#: <text>.

	The -v flag displays files with non-matching lines.

	The -F flag is used to interpret the pattern as a fixed string.

	The -G flag is used to interpret the pattern as a regular expression,
	which is the default behavior.

	The -L flag displays the name of each selected file from which no
	output would normally have been displayed. Scanning stops on the
	first match.

	The -l flag displays the name of each selected file containing
	matching text. Scanning stops on the first match.

	The -s flag suppresses error messages that result from abandoning
	files that have a maximum number of characters in a single line that
	are greater than 4096.  By default, an error is reported when grep
	abandons such files.

	The -t flag searches binary files.  By default, only text files are
	searched.

	The -A <num> flag displays the specified number of lines of trailing
	context after matching lines.

	The -B <num> flag displays the specified number of lines of leading
	context before matching lines.

	The -C <num> flag displays the specified number of lines of output
	context.

	Regular expressions:

	A regular expression is zero or more branches, separated by `|'. It
	matches anything that matches one of the branches.

	A branch is zero or more pieces, concatenated.  It matches a match
	for the first, followed by a match for the second, etc.

	A piece is an atom possibly followed by `*', `+', or `?'.  An atom
	followed by `*' matches a sequence of 0 or more matches of the atom.
	An atom followed by `+' matches a sequence of 1 or more matches of
	the atom.  An atom followed by `?' matches a match of the atom, or
	the null string.

	An atom is a regular expression in parentheses (matching a match for
	the regular expression),  a range (see below),  `.'  (matching any
	single character),  `^' (matching the null string at the beginning
	of the input string),  `$' (matching the null string at the end of
	the input string),  a `\' followed by a single character (matching
	that character),  or a single character with no other significance
	(matching that character).

	A range is a sequence of characters enclosed in `[]'.  It normally
	matches any single character from the sequence.  If the sequence
	begins with `^',  it matches any single character not from the rest
	of the sequence.  If two characters in the sequence are separated by
	`-', this is shorthand for the full list of ASCII characters between
	them (e.g. `[0-9]' matches any decimal digit).  To include a literal
	`]' in the sequence, make it the first character (following a possible
	`^').  To include a literal `-', make it the first or last character.

	The symbols '\<' and '\>' respectively match the empty string at
	the beginning and end of a word.


    files -- List files in the depot

    p4 files [ -a ] [ -A ] [ -e ] [-i] [ -m max ] file[revRange] ...
    p4 files -U unloadfile ...

	List details about specified files: depot file name, revision,
	file, type, change action and changelist number of the current
	head revision. If client syntax is used to specify the file
	argument, the client view mapping is used to determine the
	corresponding depot files.

	By default, the head revision is listed.  If the file argument
	specifies a revision, then all files at that revision are listed.
	If the file argument specifies a revision range, the highest revision
	in the range is used for each file. For details about specifying
	revisions, see 'p4 help revisions'.

	The -a flag displays all revisions within the specific range, rather
	than just the highest revision in the range.

	The -A flag displays files in archive depots.

	The -e flag displays files with an action of anything other than
	deleted, purged or archived.  Typically this revision is always
	available to sync or integrate from.

	The -i flag is used to ignore the case of the file argument when
	listing files in a case sensitive server.

	The -m flag limits files to the first 'max' number of files.

	The -U option displays files in the unload depot (see 'p4 help unload'
	for more information about the unload depot).

	See 'p4 help-graph files' for information on using this command with
	graph depots.


    attribute -- Set per-revision attributes on revisions

    p4 attribute [-e -f -p] -n name [-v value] files...
    p4 attribute [-e -f -p] -i -n name file

	Sets a user-managed attribute 'name' to 'value' on opened files.
	If -v is omitted, the attribute is cleared (if set).

	To display attributes use 'p4 fstat -Oa'.

	The -e flag indicates that the 'value' is specified in hex.

	The -f flag sets the attribute on submitted files.  If a propagating
	trait is set on a submitted file, a revision specification may not
	be used, and the file must not be currently open on any client.
	The -f flag requires 'admin' access granted by 'p4 protect'.

	The -p flag creates an attribute with a value that is propagated
	when the file is opened with 'p4 add', 'p4 edit', or 'p4 delete'.

	The -i flag causes the attribute value to be read from the standard
	input. Only one file argument is allowed when using this option.

	Multiple attributes can be set or cleared by specifying multiple
	'-n name' flags and an equal number of corresponding '-v value'
	flags (to set) or no '-v' flags (to clear).

	'p4 attribute -p' is not supported for files in a pending change
	from an edge server in a distributed environment.


    undo -- Undo a range of revisions

    p4 undo [-n] [-c changelist#] file[revRange]

	'p4 undo' opens files in order to undo a set of previously submitted
	changes.  The 'undone' changes remain a part of the history, but the
	new revisions submitted after 'p4 undo' will reverse their effect.

	If a single revision is specified, the specified revision is undone.
	If a revision range is specified, the entire range is undone.

	The workspace files opened by 'p4 undo' will be synced to the revision
	prior to the range being undone, and opened at the most recent undone
	revision.  Files that are opened at a revision prior to the head must
	be resolved prior to submit -- run 'p4 sync' and 'p4 resolve'.

	The -n flag previews the operation without changing any files.

	If -c changelist# is included, files are opened in the specified
	pending changelist instead of the default changelist.


    where -- Show how file names are mapped by the client view

    p4 where [file ...]

	Where shows how the specified files are mapped by the client view.
	For each argument, three names are produced: the name in the depot,
	the name on the client in Perforce syntax, and the name on the client
	in local syntax.

	If the file parameter is omitted, the mapping for all files in the
	current directory and below) is returned.

	Note that 'p4 where' does not determine where any real files reside.
	It only displays the locations that are mapped by the client view.


    counters -- Display list of known counters

    p4 counters [-e nameFilter -m max]

	Lists the counters in use by the server.  The server
	uses the following counters directly:

	    change           Current change number
	    job              Current job number
	    journal          Current journal number
	    lastCheckpointAction Data about the last complete checkpoint
	    logger           Event log index used by 'p4 logger'
	    maxCommitChange  Last change number successfully submitted
	    traits           Internal trait lot number used by 'p4 attribute'
	    upgrade          Server database upgrade level

	The -e nameFilter flag lists counters with a name that matches
	the nameFilter pattern, for example: -e 'mycounter-*'.

	The -m max flag limits the output to the first 'max' counters.

	The names 'minClient', 'minClientMessage', 'monitor',
	'security', 'masterGenNumber', and 'unicode' are
	reserved names: do not use them as ordinary counters.

	For general-purpose server configuration, see 'p4 help configure'.


    sizes -- Display information about the size of the files in the depot

    p4 sizes [-a -S] [-s | -z] [-b size] [-h|-H] [-m max] file[revRange] ...
    p4 sizes -A [-a] [-s] [-b size] [-h|-H] [-m max] archivefile...
    p4 sizes -U unloadfile ...

	For specified file specification, displays depot file name, revision,
	file count and file size.  If you use client syntax for the file
	specification,the view mapping is used to list the corresponding
	depot files.

	The -a flag lists all revisions within the specific range, rather
	than just the highest revision in the range.

	The -b option specifies the blocksize in bytes.  When this option
	is specified, each accumulated filesize is rounded up to the nearest
	blocksize.

	The -h or -H flag prints the sizes in human-readable form, using a
	scaling factor of 1024 for -h or 1000 for -H.

	The -m flag limits sizes to the first 'max' number of files.

	The -s option calculates the sum of the file sizes for the specified
	files.

	The -S option displays size information for shelved files only. With
	this option, revision specifications are not permitted.

	The -z option omits lazy copies when calculating the file sizes for
	the specified files.

	If there is no file size information for a file revision in the depot
	metadata, the sizes command returns a size of "<n/a>".

	'p4 verify -u' updates the metadata for all revisions that require it.

	The -A flag displays files in archive depots (see 'p4 help archive').

	The -U option displays size information for unload files in the
	unload depot (see 'p4 help unload').


	trust -- Establish trust of an SSL connection

	p4 trust [ -l -y -n -d -f -r -i <fingerprint> ]

	Establish trust of an SSL connection.  This client command manages
	the p4 trust file.  This file contains fingerprints of the keys
	received on ssl connections.  When an SSL connection is made, this
	file is examined to determine if the SSL connection has been used
	before and if the key is the same as a previously seen key for that
	connection.  Establishing trust with a connection prevents undetected
	communication interception (man-in-the-middle) attacks.

	Most options are mutually exclusive.  Only the -r and -f options
	can be combined with the others.

	The -l flag lists existing known fingerprints.

	Without options, this command will make a connection to a server
	and examine the key if present, if one cannot be found this command
	will show a fingerprint and ask if this connection should be trusted.
	If a fingerprint exists and does not match, an error that a possible
	security problems exists will be displayed.

	The -y flag will cause prompts to be automatically accepted.

	The -n flag will cause prompts to be automatically refused.

	The -d flag will remove an existing trusted fingerprint.

	The -f flag will force the replacement of a mismatched fingerprint.

	The -i flag will allow a specific fingerprint to be installed.

	The -r flag specifies that a replacement fingerprint is to be
	affected.  Replacement fingerprints can be used in anticipation
	of a server replacing its key.  If a replacement fingerprint
	exists for a connection and the primary fingerprint does not match
	while the replacement fingerprint does, the replacement fingerprint
	will replace the primary.  This flag can be combined with -l, -i,
	or -d.


    logout -- Log out from Perforce by removing or invalidating a ticket.

    p4 logout [ -a | -h host ] [ -2 ] [ username ]

	The logout command removes the ticket on the client and invalidates the
	per-host ticket value on the server.  To resume using Perforce, the
	user must log in again.

	If you are logged in to Perforce from more than one machine, you can
	log out of Perforce from all machines from which you were logged in
	by specifying the -a flag.  The -a flag invalidates the ticket on the
	server.  All of your Perforce tickets are invalidated and you are
	logged out.  To invalidate the ticket for a specific host, you may
	specify the IP address of that host with the -h flag.

	The -2 flag causes only the user's multi factor authentication state
	to be invalidated.

	Note:
	  Only 'p4 logout -a' will invalidate tickets created by 'p4 login -a'.

	Specifying a username as an argument to 'p4 logout' requires 'super'
	access, which is granted by 'p4 protect'.  Note that either the '-a'
	or '-h' flags must be used to effectively log out a user who has a
	valid ticket on another machine.


    keys -- Display list of known key/values

    p4 keys [-e nameFilter -m max]

	The -e nameFilter flag lists keys with a name that matches
	the nameFilter pattern, for example: -e 'mykey-*'.

	The -m max flag limits the output to the first 'max' keys.


    clients -- Display list of clients
    workspaces -- synonym for 'clients'

    p4 clients [-t] [-u user] [[-e|-E] nameFilter] [-m max] [-S stream]
               [-a|-s serverID]
    p4 clients -U

	Lists all client workspaces currently defined in the server.

	The -t flag displays the time as well as the date.

	The -u user flag lists client workspaces that are owned by the
	specified user.

	The -e nameFilter flag lists workspaces with a name that matches
	the nameFilter pattern, for example: -e 'svr-dev-rel*'. The -e flag
	uses the server's normal case-sensitivity rules. The -E flag makes
	the matching case-insensitive, even on a case-sensitive server.

	The -m max flag limits output to the specified number of workspaces.

	The -S stream flag limits output to the client workspaces dedicated
	to the stream.

	The -U flag lists unloaded clients (see 'p4 help unload').

	The -a flag specifies that all clients should be displayed, not just
	those that are bound to this server.

	The -s serverID flag specifies that only those clients bound to the
	specified serverID should be displayed. On an Edge Server, the -s
	flag defaults to the Edge Server's serverID.



    opened -- List open files and display file status.

    p4 opened [-a -c changelist# -C client -u user -m max -s -g] [file ...]
    p4 opened [-a -x -m max ] [file ...]

	Lists files currently opened in pending changelists, or, for
	specified files, show whether they are currently opened or locked.
	If the file specification is omitted, all files open in the current
	client workspace are listed.

	Files in shelved changelists are not displayed by this command. To
	display shelved changelists, see 'p4 changes -s shelved'; to display
	the files in those shelved changelists, see 'p4 describe -s -S'.

	If the stream spec associated with this client is currently opened,
	the stream spec is displayed on the first line of the output.

	By default, files opened by the current user in the current client
	client workspace are listed.  The -a, -C client, and -u user flags
	alter this behavior. The -a flag lists opened files in all clients.
	The -C client flag lists files open in the specified client
	workspace. The -u user flag lists files opened by the specified
	user. The -C and -u flags may be combined; -a is ignored if either
	of the -C or -u flags is used.

	The -c changelist# flag lists files opened in the specified
	changelist#.

	The -m max flag limits output to the first 'max' number of files.

	The -s option produces 'short' and optimized output when used with
	the -a (all clients) option.  For large repositories '-a' can take
	a long time when compared to '-as'.

	The -x option lists files that are opened 'exclusive'. This option
	only applies to a distributed installation where global tracking of
	these file types is necessary across servers. The -x option implies
	the -a option.

	The -g option lists files that are opened on the Commit Server
	in a distributed installation. This is useful for tracking files
	that may be globally locked on the Commit Server from any of its
	Edge Servers. Since the command query runs on the Commit Server,
	the file spec argument (if any) must be in depot syntax. The -g
	option implies the -a option.

	See 'p4 help-graph opened' for information on using this command with
	graph depots.


    reconcile -- Open files for add, delete, and/or edit to reconcile
                 client with workspace changes made outside of Perforce

    rec         -- synonym for 'reconcile'
    status      -- 'reconcile -n + opened' (output uses local paths)
    status -A   -- synonym for 'reconcile -ead' (output uses local paths)

    clean       -- synonym for 'reconcile -w'

    p4 reconcile [-c change#] [-e -a -d -f -I -l -m -n -w] [file ...]
    p4 status [-c change#] [-A | [-e -a -d] | [-s]] [-f -I -m] [file ...]
    p4 clean [-e -a -d -I -l -n] [file ...]
    p4 reconcile -k [-l -n] [file ...]
    p4 status -k [file ...]

	'p4 reconcile' finds unopened files in a client's workspace and
	detects the following:

	1. files in depot missing from workspace, but still on have list
	2. files on workspace that are not in depot
	3. files modified in workspace that are not opened for edit

	By default, the files matching each condition above in the path
	are reconciled by opening files for delete (scenario 1), add
	(scenario 2), and/or edit (scenario 3). The -e, -a, and -d flags
	may be used to limit to a subset of these operations. If no file
	arguments are given, reconcile and status default to the current
	working directory.

	If the list of files to be opened includes both adds and deletes,
	the missing and added files will be compared and converted to pairs
	of move/delete and move/add operations if they are similar enough.

	In addition to opening unopened files, reconcile will detect files
	that are currently opened for edit but missing from the workspace
	and reopen them for delete. Reconcile will also detect files opened
	for delete that are present on the workspace and reopen them for
	edit.

	The -n flag previews the operation without performing any action.
	Although metadata updates from reconcile require open permission,
	the preview commands only require read access.

	If -c changelist# is included, the files are opened in the specified
	pending changelist.

	The -e flag allows the user to reconcile files that have been
	modified outside of Perforce. The reconcile command will open
	these files for edit.

	The -a flag allows the user to reconcile files that are in the
	user's directory that are not under Perforce source control. These
	files are opened for add.

	The -f flag allows the user to add files with filenames that contain
	wildcard characters. Filenames that contain the special characters
	'@', '#', '%' or '*' are reformatted to encode the characters using
	ASCII hexadecimal representation.  After the files are added, you
	must refer to them using the reformatted file name, because Perforce
	does not recognize the local filesystem name.

	The -I flag informs the client that it should not perform any ignore
	checking configured by P4IGNORE.

	The -d flag allows the user to reconcile files that have been
	removed from the user's directory but are still in the depot.
	These files will be opened for delete only if they are still on the
	user's have list.

	The -l flag requests output in local file syntax using relative
	paths, similar to the workspace-centric view provided by 'status'.

	The -m flag used in conjunction with -e can be used to minimize
	costly digest computation on the client by checking file modification
	times before checking digests to determine if files have been
	modified outside of Perforce.

	The -w flag forces the workspace files to be updated to match the
	depot rather than opening them so that the depot can be updated to
	match the workspace.  Files that are not under source control will
	be deleted, and modified or deleted files will be refreshed.  Note
	that this operation will result in the loss of any changes made to
	unopened files. This option requires read permission.

	The -k flag updates the have list when files in the workspace but
	not on the have list match content of corresponding files in the
	depot. In this case, the client's have list is updated to reflect
	the matching revisions. This option is used to reconcile the have
	list with the workspace.

	The -s flag (only used with 'p4 status') requests summarized
	output for the files to be opened for 'add'. Files in the current
	directory are listed as usual, but subdirectories containing files
	to be opened for 'add' are displayed instead of each file. This
	optimized option doesn't support move detection. Files to open
	for 'delete' and 'edit' are still listed individually.

	The status command displays preview output which includes files
	which are already opened in addition to the files that need to
	be reconciled. Opened files are not shown with options -A/-a/-e/-d.

	'p4 reconcile' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph reconcile' for information on using this command
	with graph depots.


    integrated -- List integrations that have been submitted

    p4 integrated [-r] [-b branch] [file ...]

	The p4 integrated command lists integrations that have been submitted.
	To list unresolved integrations, use 'p4 resolve -n'.  To list
	resolved but unsubmitted integrations, use 'p4 resolved'.

	If the -b branch flag is specified, only files integrated from the
	source to target files in the branch view are listed.  Qualified
	files are listed, even if they were integrated without using the
	branch view.

	The -r flag reverses the mappings in the branch view, swapping the
	target files and source files.  The -b branch flag is required.


    jobs -- Display list of jobs

    p4 jobs [-e jobview -i -l -m max -r] [file[revRange] ...]
    p4 jobs -R

	Lists jobs in the server. If a file specification is included, fixes
	for submitted changelists affecting the specified files are listed.
	The file specification can include wildcards and a revision range.
	 See 'p4 help revisions' for details about specifying revisions.

	The -e flag lists jobs matching the expression specified in the
	jobview parameter. For a description of jobview syntax, see 'p4 help
	jobview'.

	The -i flag includes any fixes made by changelists integrated into
	the specified files.

	The -l flag produces long output with the full text of the job
	descriptions.

	The -m max flag limits the output to the first 'max' jobs, ordered
	by their job name.

	The -r flag sorts the jobs in reverse order (by job name).

	The -R flag rebuilds the jobs table and reindexes each job, which
	is necessary after upgrading to 98.2.  'p4 jobs -R' requires that the
	user be an operator or have 'super' access granted by 'p4 protect'.


    depot -- Create or edit a depot specification

    p4 depot [-t type] name
    p4 depot -d [-f] name
    p4 depot -o name
    p4 depot -i

	Create a new depot specification or edit an existing depot
	specification. The specification form is put into a temporary file
	and the editor (configured by the environment variable $P4EDITOR)
	is invoked.

	The depot specification contains the following fields:

	Depot:       The name of the depot.  This name cannot be the same as
		     any branch, client, or label name.

	Owner:       The user who created this depot.

	Date:        The date that this specification was last modified.

	Description: A short description of the depot (optional).

	Type:        One of the types: 'local', 'stream', 'remote', 'spec',
		     'archive', 'unload', 'tangent', 'extension' or 'graph'.

		     A 'local' depot (the default) is managed directly by
		     the server and its files reside in the server's root
		     directory.

		     A 'stream' depot is a local depot dedicated to the
		     storage of files in a stream.

		     A 'remote' depot refers to files in another Perforce
		     server.

		     A 'spec' depot automatically archives all edited forms
		     (branch, change, client, depot, group, job, jobspec,
		     protect, triggers, typemap, and user) in special,
		     read-only files.  The files are named:
		     //depotname/formtype/name[suffix].  Updates to jobs made
		     by the 'p4 change', 'p4 fix', and 'p4 submit' commands
		     are also saved, but other automatic updates such as
		     as access times or opened files (for changes) are not.
		     A server can contain only one 'spec' depot.

		     A 'archive' depot defines a storage location to which
		     obsolete revisions may be relocated.

		     An 'unload' depot defines a storage location to which
		     database records may be unloaded and from which they
		     may be reloaded.

		     A 'tangent' depot defines a read-only location which
		     holds tangents created by the 'fetch -t' command. The
		     tangent depot named 'tangent' is automatically created
		     by 'fetch -t' if one does not already exist.

		     An 'extension' depot stores files related to Helix Core
		     Extensions.  See 'p4 help extension'.

		     A 'graph' depot defines a storage location to which
		     one or more git repositories are represented using
		     the git data model.

	Address:     For remote depots, the $P4PORT (connection address)
		     of the remote server.

	Suffix:      For spec depots, the optional suffix to be used
		     for generated paths. The default is '.p4s'.

	StreamDepth: For stream depots, the optional depth to be used
		     for stream paths in the depot, where depth equates
	             to the number of slashes following the depot name of a
	             stream.  This field is referenced when streams are
	             being created. The default is '1', matching the
	             traditional stream name.  This value may not be updated
	             once streams or archive data exist within the depot.

	Map:         Path translation information, in the form of a file
		     pattern with a single ... in it.  For local depots,
		     this path is relative to the server's root directory
		     or to server.depot.root if it has been configured
		     (Example: depot/...).  For remote depots, this path
		     refers to the remote server's namespace
		     (Example: //depot/...).

	SpecMap:     For spec depots, the optional description of which
	             specs should be saved, as one or more patterns.

	The -d flag deletes the specified depot.  If any files reside in the
	depot, they must be removed with 'p4 obliterate' before deleting the
	depot. If any archive files remain in the depot directory, they may
	be referenced by lazy copies in other depots; use 'p4 snap' to break
	those linkages. Snap lazy copies prior to obliterating the old depot
	files to allow the obliterate command to remove any unreferenced
	archives from the depot directory. If the depot directory is not
	empty, you must specify the -f flag to delete the depot.

	The -t flag is used to insert a value into the type field of a new
	depot spec.  This flag is ignored when used with existing depots.

	The -o flag writes the depot specification to standard output. The
	user's editor is not invoked.

	The -i flag reads a depot specification from standard input. The
	user's editor is not invoked.


    unlock -- Release a locked file, leaving it open

    p4 unlock [-c | -s changelist# | -x] [-f] [file ...]
    p4 -c client unlock [-f] -r

	'p4 unlock' releases locks on the specified files.

	The changelist flag and file specification limit the files to be
	unlocked. If no file specification is given and no changelist is
	specified, all open files are unlocked.

	If a changelist is specified, only those files open in that
	changelist are unlocked.

	If a file specification is given, only those files are unlocked.

	If both changelist and file specification are provided, only the
	matching files in the specified changelist are unlocked.

	The -s flag unlocks files from a shelved changelist caused by an
	aborted 'submit -e' operation. The -c flag applies to opened files
	in a pending changelist locked by 'p4 lock' or by a failed submit
	of a change that is not shelved.

	By default, files can be unlocked only by the changelist owner who
	must also be the person who has the files locked. The -f flag
	enables you to unlock files in changelists owned by other users.
	The -f flag requires 'admin' access, which is granted by 'p4
	protect'.

	If 'p4 unlock' is called from an Edge Server, any corresponding
	files locked globally via 'p4 lock -g' by that client will be
	unlocked on the Commit Server.

	The -x option unlocks files that are opened 'exclusive' but are
	orphaned (see 'p4 opened -x'). This option only applies to a
	distributed installation where global tracking of these file types
	is necessary across servers. On the commit server, an administrator
	may specify 'p4 -c client unlock -f -x [file...]' to unlock the
	global exclusive locks of files which aren't marked orphaned.

	If a push command from a remote server to this server fails, files
	can be left locked on this server, preventing other users from
	submitting changes to those files. Files may also be left locked on
	a Commit Server from a failed submit or unlock. In these cases, the
	user who issued the failed command can use the second syntax form.
	The -r flag indicates the remote or commit server holding the lock.
	The -c global flag indicates the name of the client that issued the
	failed command. The -f flag allows the administrator to force the
	lock to be released.

	See 'p4 help-graph unlock' for information on using this command with
	graph depots.


    switch -- Switch to a different stream, or create a new stream.

    p4 switch [-c -m -v -P parent] [-Rx] [-r] stream
    p4 switch [-r -v] [-Rx] [stream]@change
    p4 switch -l -L
    p4 switch

	The switch command switches to a different stream, optionally
	creating and populating that stream.

	The second form of the command is intended for reproducing
	back-in-time view and revision synchronization. To use this form,
	specify a change number and, optionally, a stream. The client will
	be switched to the stream specification that was available at the
	time of that change; also the workspace will be synced to that
	changelist.  If the stream is omitted but '@change' is specified,
	no stream switch is performed, but the workspace is synced to that
	change.

	The -c flag specifies that the new stream should be created and
	populated with a copy of all the files in the current stream.
	Local (dvcs) server only command.

	The -m flag specifies that 'switch -c' should create a new stream
	with no parent (an independent mainline). The new stream will be
	initially empty.
	Local (dvcs) server only command.

	The -P flag specifies that 'switch -c' should create a new stream
	with the specified stream as its parent, and thus the new stream
	will be populated with the files from the specified stream, rather
	than the files from the current stream.
	Local (dvcs) server only command.

	The -l flag specifies that all known streams should be listed.

	The -L flag specifies that all streams that were switched @change
	with files open in that stream should be listed.

	The -r flag reopens files in the new mapped location of the specified
	stream. If you omit the -r flag, and you have opened files in the
	current stream, those files are shelved before switching to the new
	stream, and are unshelved subsequently when you switch back to this
	stream.

	The -R option changes the way 'reconcile' is run when switching
	between streams:

	        -Ra     reconcile files not currently under Perforce control,
	                (these files are opened for add).
	        -Re     reconcile files that have been modified,
	                (these files are opened for edit).
	        -Rd     reconcile files that have been removed,
	                (these files are opened for delete).
	        -Rn     reconcile does not run.

	        Without this option, 'reconcile' runs as if all (-Raed)
	        options were set.

	The -v flag gives verbose information.

	With no arguments, the switch command displays the current stream.

	When switching to a different stream, the switch command first runs
	'p4 reconcile' to determine which files have been modified in the
	current stream.

	You cannot switch to a new stream if files are open in a numbered
	changelist. If files are open in the default changelist, they will
	be shelved and reverted prior to switching to the new stream, and
	will be automatically unshelved when switching back to this stream.

	After switching to the new stream, switch syncs your workspace to
	the head of the new stream, and unshelves any files which were open
	in the default changelist the last time you used that stream.

	See 'p4 help-graph switch' for information on using this command with
	graph depots.


    users -- List Perforce users

    p4 users [-l -a -r -c] [-m max] [user ...]

	Lists all Perforce users or users that match the 'user' argument.
	The report includes the last time that each user accessed the system.

	The -m max flag limits output to the first 'max' number of users.

	The -a flag includes service and operator users in the output.

	The -l flag includes additional information in the output.  The -l
	flag requires 'super' access, which is granted by 'p4 protect'.

	The -r and -c flags are only allowed on replica servers.  When
	-r is given only users who have used a replica are reported and
	when -c is given only the user information from the central server
	is reported.  Otherwise on a replica server, the user list will
	be slightly different from the master server as the user access times
	will reflect replica usage or master usage whichever is newer.


    reshelve -- Copy shelved files to a new or existing shelf.

    p4 reshelve [-p] -s changelist# [file ...]
    p4 reshelve [-f] [-p] -s changelist# -c changelist# [file ...]

	'p4 reshelve' copies shelved files from an existing shelf into
	either a new shelf or one that has already been created. This
	command leaves the source shelf intact.

	If a file pattern is specified, 'p4 reshelve' shelves the files that
	match the pattern.

	The -s flag specifies the shelved changelist that contains the
	shelved files to be copied.

	The -c flag specifies the pending changelist that will be the target
	for the shelved files rather than creating a new one. To update
	a target shelf you must be the owner of the changelist.

	The -f (force) flag must be used when the same file already exists in
	the target changelist in order to overwrite it.

	The -p flag promotes the new or target changelist where it can be
	accessed by other edge servers participating in the distributed
	configuration.  Once a shelved change has been promoted, all
	subsequent local modifications to the shelf are also pushed to
	the commit server and remain until the shelf is deleted.


    tag -- Tag files with a label

    p4 tag [-d -g -n -U] -l label file[revRange] ...

	Tag associates the named label with the file revisions specified by
	the file argument.  After file revisions are tagged with a label,
	revision specifications of the form '@label' can be used to refer
	to them.

	If the file argument does not include a revision specification, the
	head revisions is tagged.  See 'p4 help revisions' for revision
	specification options.

	If the file argument includes a revision range specification, only
	the files with revisions in that range are tagged.  Files with more
	than one revision in the range are tagged at the highest revision.

	The -d deletes the association between the specified files and the
	label, regardless of revision.

	The -n flag previews the results of the operation.

	Tag can be used with an existing label (see 'p4 help labels') or
	with a new one.  An existing label can be used only by its owner,
	and only if it is unlocked. (See 'p4 help label').

	The -U flag specifies that the new label should be created with the
	'autoreload' option (See 'p4 help label'). It has no effect on an
	existing label.

	To list the file revisions tagged with a label, use 'p4 files
	@label'.

	The -g flag is used on an Edge Server to update a global label.
	Configuring rpl.labels.global=1 reverses this default and causes this
	flag to have the opposite meaning.

	See 'p4 help-graph tag' for information on using this command with
	graph depots.


    add -- Open a new file to add it to the depot

    p4 add [-c changelist#] [-d -f -I -n] [-t filetype] file ...

	Open a file for adding to the depot.  If the file exists on the
	client, it is read to determine if it is text or binary. If it does
	not exist, it is assumed to be text.  To be added, the file must not
	already reside in the depot, or it must be deleted at the current
	head revision.  Files can be deleted and re-added.

	A 2012.1 client will ignore files that were to be added, if they
	match an exclusion line specified in a P4IGNORE file.

	To associate the open files with a specific pending changelist, use
	the -c flag; if you omit the -c flag, the open files are associated
	with the default changelist.

	As a shortcut to reverting and re-adding, you can use the -d
	flag to reopen currently-open files for add (downgrade) under
	the following circumstances:

	    A file that is 'opened for edit' and is synced to the head
	    revision, and the head revision has been deleted (or moved).

	    A file that is 'opened for move/add' can be downgraded to add,
	    which is useful when the source of the move has been deleted
	    or moved.  Typically, under these circumstances, your only
	    alternative is to revert.  In this case, breaking the move
	    connection enables you to preserve any content changes in the
	    new file and safely revert the source file (of the move).

	To specify file type, use the -t flag.  By default, 'p4 add'
	determines file type using the name-to-type mapping table managed
	by 'p4 typemap' and by examining the file's contents and execute
	permission bit. If the file type specified by -t or configured in
	the typemap table is a partial filetype, the resulting modifier is
	applied to the file type that is determined by 'p4 add'. For more
	details, see 'p4 help filetypes'.

	To add files with filenames that contain wildcard characters, specify
	the -f flag. Filenames that contain the special characters '@', '#',
	'%' or '*' are reformatted to encode the characters using ASCII
	hexadecimal representation.  After the files are added, you must
	refer to them using the reformatted file name, because Perforce
	does not recognize the local filesystem name.

	The -I flag informs the client that it should not perform any ignore
	checking configured by P4IGNORE.

	The -n flag displays a preview of the specified add operation without
	changing any files or metadata.

	See 'p4 help-graph add' for information on using this command with
	graph depots.


    login2 -- Perform multi factor authentication

    p4 login2 [ -p -R ] [ -h host ] [ -S state ] [ -m method ] [ username ]
    p4 login2 -s [ -a | -h host ] [ username ]

	The login2 command enables a user requiring multi factor
	authentication to authorize access on a given host.

	The -p flag causes the multi factor authorization to persist even
	after the user's ticket has expired.  The authorization status can
	still be invalidated by running 'p4 logout'.

	The -R flag causes the multi factor authentication to be restarted
	allowing users to re-request a OTP, etc.

	The -s flag displays the multi factor authorization status for the
	user on the current host, or all hosts that the user has used if the
	-a flag is used.  To show the status for a specific host, the IP
	address  can be specified with the -h flag.

	Specifying a username as an argument to 'p4 login2' requires 'super'
	access, which is granted by 'p4 protect'.  In this case, 'p4 login2'
	skips the multi factor authentication process and immediately marks
	the user as validated for the current host (the super user must already
	be logged in and verified if necessary).  A host (IP address) can be
	specified with the -h flag to validate the user on a different host.

	For non-interactive clients, the -S flag can be used to execute each
	step of the multi factor authentication individually.  This must begin
	with the 'list-methods' state, which will report the list of available
	multi factor authentication methods for the given user.  The next
	state must be 'init-auth', and must be accompanied by the chose method
	provided to the -m flag: this will initiate the authentication with the
	multi factor authentication provider.  The final step is 'check-auth',
	which will either prompt for a OTP or request the authorization status
	from the multi factor authentication provider, depending on the type
	of authentication method selected.  The -p flag may be provided at the
	'init-auth' stage.  If a host and/or user is being specified, the
	appropriate arguments must be provided at each stage.


    move -- move file(s) from one location to another
    rename -- synonym for 'move'

    p4 move [-c changelist#] [-f -n -k] [-t filetype] fromFile toFile
    p4 move -r [-c changelist#] [-n -k] fromFile toFile

	Move by default takes an already opened file and moves it from one
	client location to another, reopening it as a pending depot move.
	When the file is submitted with 'p4 submit', its depot file is moved
	accordingly.

	Wildcards in fromFile and toFile must match. The fromFile must be
	a file open for add or edit unless invoked with '-r'.

	'p4 opened' lists pending moves. 'p4 diff' can compare a moved
	client file with its depot original, 'p4 sync' can schedule an
	update of a moved file, and 'p4 resolve' can resolve the update.

	A client file can be moved many times before it is submitted.
	Moving a file back to its original location will undo a pending
	move, leaving unsubmitted content intact.  Using 'p4 revert'
	undoes the move and reverts the unsubmitted content.

	If -c changelist# is specified, the file is reopened in the
	specified pending changelist as well as being moved.

	The -f flag forces a move to an existing target file. The file
	must be synced and not opened.  The originating source file will
	no longer be synced to the client.

	If -t filetype is specified, the file is assigned that filetype.
	If the filetype is a partial filetype, the partial filetype is
	combined with the current filetype.  See 'p4 help filetypes'.

	The -n flag previews the operation without moving files.

	The -k flag performs the rename on the server without modifying
	client files. Use with caution, as an incorrect move can cause
	discrepancies between the state of the client and the corresponding
	server metadata.

	The -r flag may be used to rename existing files without altering
	content or type to a new target. This option allows the user to
	move files from the depot to a different location without opening
	the files first. Since this option performs a strict rename only,
	the '-t' and '-f' flags are not allowed, source files must not be
	already opened, and the targets must not already exist.

	The 'move' command requires a release 2009.1 or newer client. The
	'-f' flag requires a 2010.1 client.


     counter -- Display, set, or delete a counter

     p4 counter name
     p4 counter [-f -v] name value
     p4 counter [-f] -d name
     p4 counter [-f -v] -i name
     p4 counter [-f] -m [ pair list ]
     p4 counter --from=oldValue --to=newValue name

	The first form displays the value of the specified counter.

	The second form sets the counter to the specified value.

	The third form deletes the counter.  This option usually has the
	same effect as setting the counter to 0.

	The -f flag sets or deletes counters used by Perforce,  which are
	listed by 'p4 help counters'. Important: Never set the 'change'
	counter to a value that is lower than its current value.

	The -i flag increments a counter by 1 and returns the new value.
	This option is used instead of a value argument and can only be
	used with numeric counters.

	The -v flag displays the previous value of the specified counter
	after the counter has been set or incremented.

	The -m flag in the fifth form allows multiple operations in one
	command. With this form, the list is pairs of arguments.  Each pair
	is either counter value or '-' counter.  To set a counter use a name
	and value. To delete a counter use a '-' followed by the name.

	The sixth form sets a counter to the newValue only if the current
	value of the counter is oldValue. Note that a counter that has never
	been set (or has been deleted) cannot be set using this form.

	Counters can be assigned textual values as well as numeric ones,
	despite the name 'counter'.

	'p4 counter' requires 'review' access granted by 'p4 protect'.
	The -f flag requires that the user be an operator or have 'super'
	access.


    dirs -- List depot subdirectories

    p4 dirs [-C -D -H] [-S stream] [-i] dir[revRange] ...

	List directories that match the specified file pattern (dir).
	This command does not support the recursive wildcard (...).
	Use the * wildcard instead.

	Perforce does not track directories individually. A path is treated
	as a directory if there are any undeleted files with that path as a
	prefix.

	By default, all directories containing files are listed. If the dir
	argument includes a revision range, only directories containing files
	in the range are listed. For details about specifying file revisions,
	see 'p4 help revisions'.

	The -i flag is used to ignore the case of the file pattern when
	listing directories in a case sensitive server. This flag is not
	compatible with the -C option.

	The -C flag lists only directories that fall within the current
	client view.

	The -D flag includes directories containing only deleted files.

	The -H flag lists directories containing files synced to the current
	client workspace.

	The -S flag limits output to depot directories mapped in a stream's
	client view.

	See 'p4 help-graph dirs' for information on using this command with
	graph depots.


    delete -- Open an existing file for deletion from the depot

    p4 delete [-c changelist#] [-n -v -k] [--remote=rmt] file ...

	Opens a depot file for deletion.
	If the file is synced in the client workspace, it is removed.  If a
	pending changelist number is specified using with the -c flag, the
	file is opened for delete in that changelist. Otherwise, it is opened
	in the default pending changelist.

	Files that are deleted generally do not appear on the have list.

	The -n flag displays a preview of the operation without changing any
	files or metadata.

	The -k flag performs the delete on the server without modifying
	client files.  Use with caution, as an incorrect delete can cause
	discrepancies between the state of the client and the corresponding
	server metadata.

	The -v flag enables you to delete files that are not synced to the
	client workspace. The files should be specified using depot syntax;
	since the files are not synced, client syntax or local syntax are
	inappropriate and could introduce ambiguities in the file list.
	Note, though, that if the files ARE synced, 'delete -v' will remove
	the files from the client in addition to opening them for delete.
	The preferred way to delete a set of files without transferring
	them to your machine is: 'sync -k file...', then 'delete -k file...'

	The --remote flag is useful for DVCS configurations in which files
	of type +l are in use. 'p4 delete --remote=origin filename' opens the
	named file for deletion in your DVCS server, and additionally, if the
	file is of type +l, takes a global exclusive lock on the origin
	server. That global exclusive lock will be retained until you push
	the deleted file to the origin server, or until you use the
	'p4 revert --remote=origin filename' command to revert the file.

	'p4 delete' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

	See 'p4 help-graph delete' for information on using this command with
	graph depots.


    resolve -- Resolve integrations and updates to workspace files

    p4 resolve [options] [file ...]

	options: -A<flags> -a<flags> -d<flags> -f -n -N -o -t -v
		 -c changelist#

	'p4 resolve' resolves changes to files in the client workspace.
	
	'p4 resolve' works only on files that have been scheduled to be
	resolved.  The commands that can schedule resolves are: 'p4 sync',
	'p4 update', 'p4 submit', 'p4 merge', and 'p4 integrate'.  Files must
	be resolved before they can be submitted.

	Resolving involves two sets of files, a source and a target.  The
	target is a set of depot files that maps to opened files in the
	client workspace.  When resolving an integration, the source is a
	different set of depot files than the target.  When resolving an
	update, the source is the same set of depot files as the target,
	at a different revision.

	The 'p4 resolve' file argument specifies the target.  If the file
	argument is omitted, all unresolved files are resolved.

	Resolving can modify workspace files. To back up files, use 'p4
	shelve' before using 'p4 resolve'.

	The resolve process is a classic three-way merge. The participating
	files are referred to as follows:

	  'yours'       The target file open in the client workspace
	  'theirs'      The source file in the depot
	  'base'        The common ancestor; the highest revision of the
	                source file already accounted for in the target.
	  'merged'      The merged result.

	Filenames, filetypes, and text file content can be resolved by
	accepting 'yours', 'theirs', or 'merged'.  Branching, deletion, and
	binary file content can be resolved by accepting either 'yours' or
	'theirs'.

	When resolving integrated changes, 'p4 resolve' distinguishes among
	four results: entirely yours, entirely theirs, a pure merge, or an
	edited merge.  The distinction is recorded when resolved files are
	submitted, and will be used by future commands to determine whether
	integration is needed.

	In all cases, accepting 'yours' leaves the target file in its current
	state.  The result of accepting 'theirs' is as follows:

	   Content:     The target file content is overwritten.
	   Attribute:   The target's attributes are replaced.
 	   Branching:	A new target is branched.
 	   Deletion:    The target file is deleted.
 	   Filename:	The target file is moved or renamed.
 	   Filetype:    The target file's type is changed.

	For each unresolved change, the user is prompted to accept a result.
	Content and non-content changes are resolved separately.  For content,
	'p4 resolve' places the merged result into a temporary file in the
	client workspace.  If there are any conflicts, the merged file contains
	conflict markers that must be removed by the user.

	'p4 resolve' displays a count of text diffs and conflicts, and offers
	the following prompts:

	  Accept:
	     at              Keep only changes to their file.
	     ay              Keep only changes to your file.
	   * am              Keep merged file.
	   * ae              Keep merged and edited file.
	   * a               Keep autoselected file.

	  Diff:
	   * dt              See their changes alone.
	   * dy              See your changes alone.
	   * dm              See merged changes.
	     d               Diff your file against merged file.

	  Edit:
	     et              Edit their file (read only).
	     ey              Edit your file (read/write).
	   * e               Edit merged file (read/write).

	  Misc:
	   * m               Run '$P4MERGE base theirs yours merged'.
			     (Runs '$P4MERGEUNICODE charset base theirs
			      yours merged' if set and the file is a
			      unicode file.)
	     s               Skip this file.
	     h               Print this help message.
	     ^C              Quit the resolve operation.

	Options marked (*) appear only for text files. The suggested action
	will be displayed in brackets.

	The 'merge' (m) option enables you to invoke your own merge program, if
	one is configured using the $P4MERGE environment variable.  Four files
	are passed to the program: the base, yours, theirs, and the temporary
	file. The program is expected to write merge results to the temporary
	file.

	The -A flag can be used to limit the kind of resolving that will be
	attempted; without it, everything is attempted:

	    -Aa		Resolve attributes.
	    -Ab		Resolve file branching.
	    -Ac		Resolve file content changes.
	    -Ad		Resolve file deletions.
	    -Am		Resolve moved and renamed files.
	    -At		Resolve filetype changes.
	    -AQ		Resolve charset changes.

	The -a flag puts 'p4 resolve' into automatic mode. The user is not
	prompted, and files that can't be resolved automatically are skipped:

	    -as		'Safe' resolve; skip files that need merging.
	    -am 	Resolve by merging; skip files with conflicts.
	    -af		Force acceptance of merged files with conflicts.
	    -at		Force acceptance of theirs; overwrites yours.
	    -ay		Force acceptance of yours; ignores theirs.

	The -as flag causes the workspace file to be replaced with their file
	only if theirs has changed and yours has not.

	The -am flag causes the workspace file to be replaced with the result
	of merging theirs with yours. If the merge detected conflicts, the
	file is left untouched and unresolved.

	The -af flag causes the workspace file to be replaced with the result
	of merging theirs with yours, even if there were conflicts.  This can
	leave conflict markers in workspace files.

	The -at flag resolves all files by copying theirs into yours. It
	should be used with care, as it overwrites any changes made to the
	file in the client workspace.

	The -ay flag resolves all files by accepting yours and ignoring
	theirs. It preserves the content of workspace files.

	The -d flags can be used to control handling of whitespace and line
	endings when merging files:

	    -db		Ignore whitespace changes.
	    -dw		Ignore whitespace altogether.
	    -dl 	Ignores line endings.

	The -d flags are also passed to the diff options in the 'p4 resolve'
	dialog. Additional -d flags that modify the diff output but do not
	modify merge behavior include -dn (RCS), -dc (context), -ds (summary),
	and -du (unified). Note that 'p4 resolve' uses text from the client
	file if the files differ only in whitespace.

	The -f flag enables previously resolved content to be resolved again.
	By default, after files have been resolved, 'p4 resolve' does not
	process them again.

	The -n flag previews the operation without altering files.

	The -N flag previews the operation with additional information about
	any non-content resolve actions that are scheduled.

	The -o flag displays the base file name and revision to be used
	during the merge.

	The -t flag forces 'p4 resolve' to attempt a textual merge, even for
	files with non-text (binary) types.

	The -v flag causes 'p4 resolve' to insert markers for all changes,
	not just conflicts.

	The -c flag limits 'p4 resolve' to the files in changelist#.

	'p4 resolve' is not supported for files with propagating attributes
	from an edge server in a distributed environment.

